
ColorMixingBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004708  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e4  080048e4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080048e4  080048e4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e4  080048e4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000001c  08004908  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004908  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3d4  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fb  00000000  00000000  0002a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011aa0  00000000  00000000  0002d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bacf  00000000  00000000  0003ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e6df  00000000  00000000  0004a6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000b8e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080047fc 	.word	0x080047fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080047fc 	.word	0x080047fc

0800014c <initSEG>:
	HAL_GPIO_WritePin(DIGIT7_GPIO_Port, DIGIT7_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIGIT8_GPIO_Port, DIGIT8_Pin, GPIO_PIN_SET);
}

void initSEG(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint16_t pinportA = SEG_A_Pin;
 8000152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000156:	80fb      	strh	r3, [r7, #6]
	uint16_t pinportC = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8000158:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800015c:	80bb      	strh	r3, [r7, #4]
	uint16_t pinportB = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT1_Pin|DIGIT2_Pin|DIGIT3_Pin|DIGIT4_Pin|DIGIT5_Pin|DIGIT6_Pin|DIGIT7_Pin|DIGIT8_Pin;
 800015e:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000162:	807b      	strh	r3, [r7, #2]
	uint16_t pinportD = SEG_E_Pin;
 8000164:	2304      	movs	r3, #4
 8000166:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, pinportA, GPIO_PIN_RESET);
 8000168:	88fb      	ldrh	r3, [r7, #6]
 800016a:	2200      	movs	r2, #0
 800016c:	4619      	mov	r1, r3
 800016e:	480c      	ldr	r0, [pc, #48]	; (80001a0 <initSEG+0x54>)
 8000170:	f003 f951 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_B_GPIO_Port,pinportC , GPIO_PIN_RESET);
 8000174:	88bb      	ldrh	r3, [r7, #4]
 8000176:	2200      	movs	r2, #0
 8000178:	4619      	mov	r1, r3
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <initSEG+0x58>)
 800017c:	f003 f94b 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_E_GPIO_Port, pinportD, GPIO_PIN_RESET);
 8000180:	883b      	ldrh	r3, [r7, #0]
 8000182:	2200      	movs	r2, #0
 8000184:	4619      	mov	r1, r3
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <initSEG+0x5c>)
 8000188:	f003 f945 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_F_GPIO_Port,pinportB , GPIO_PIN_RESET);
 800018c:	887b      	ldrh	r3, [r7, #2]
 800018e:	2200      	movs	r2, #0
 8000190:	4619      	mov	r1, r3
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <initSEG+0x60>)
 8000194:	f003 f93f 	bl	8003416 <HAL_GPIO_WritePin>

}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010800 	.word	0x40010800
 80001a4:	40011000 	.word	0x40011000
 80001a8:	40011400 	.word	0x40011400
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <printchar>:
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;
}

void printchar(int chara,uint16_t Pin)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b08a      	sub	sp, #40	; 0x28
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
 80001b8:	460b      	mov	r3, r1
 80001ba:	807b      	strh	r3, [r7, #2]
	int segmA =(0x01&(SevenSegmentASCII[chara-32]));
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3b20      	subs	r3, #32
 80001c0:	4a44      	ldr	r2, [pc, #272]	; (80002d4 <printchar+0x124>)
 80001c2:	5cd3      	ldrb	r3, [r2, r3]
 80001c4:	f003 0301 	and.w	r3, r3, #1
 80001c8:	627b      	str	r3, [r7, #36]	; 0x24
	int segmB =(0x02&(SevenSegmentASCII[chara-32]))>>1;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3b20      	subs	r3, #32
 80001ce:	4a41      	ldr	r2, [pc, #260]	; (80002d4 <printchar+0x124>)
 80001d0:	5cd3      	ldrb	r3, [r2, r3]
 80001d2:	085b      	lsrs	r3, r3, #1
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	f003 0301 	and.w	r3, r3, #1
 80001da:	623b      	str	r3, [r7, #32]
	int segmC =(0x04&(SevenSegmentASCII[chara-32]))>>2;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3b20      	subs	r3, #32
 80001e0:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <printchar+0x124>)
 80001e2:	5cd3      	ldrb	r3, [r2, r3]
 80001e4:	089b      	lsrs	r3, r3, #2
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	61fb      	str	r3, [r7, #28]
	int segmD =(0x08&(SevenSegmentASCII[chara-32]))>>3;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3b20      	subs	r3, #32
 80001f2:	4a38      	ldr	r2, [pc, #224]	; (80002d4 <printchar+0x124>)
 80001f4:	5cd3      	ldrb	r3, [r2, r3]
 80001f6:	08db      	lsrs	r3, r3, #3
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	61bb      	str	r3, [r7, #24]
	int segmE =(0x10&(SevenSegmentASCII[chara-32]))>>4;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3b20      	subs	r3, #32
 8000204:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <printchar+0x124>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	091b      	lsrs	r3, r3, #4
 800020a:	b2db      	uxtb	r3, r3
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	617b      	str	r3, [r7, #20]
	int segmF =(0x20&(SevenSegmentASCII[chara-32]))>>5;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	3b20      	subs	r3, #32
 8000216:	4a2f      	ldr	r2, [pc, #188]	; (80002d4 <printchar+0x124>)
 8000218:	5cd3      	ldrb	r3, [r2, r3]
 800021a:	095b      	lsrs	r3, r3, #5
 800021c:	b2db      	uxtb	r3, r3
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	613b      	str	r3, [r7, #16]
	int segmG =(0x40&(SevenSegmentASCII[chara-32]))>>6;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b20      	subs	r3, #32
 8000228:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <printchar+0x124>)
 800022a:	5cd3      	ldrb	r3, [r2, r3]
 800022c:	099b      	lsrs	r3, r3, #6
 800022e:	b2db      	uxtb	r3, r3
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
	int segmDP =(0x80&(SevenSegmentASCII[chara-32]))>>7;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3b20      	subs	r3, #32
 800023a:	4a26      	ldr	r2, [pc, #152]	; (80002d4 <printchar+0x124>)
 800023c:	5cd3      	ldrb	r3, [r2, r3]
 800023e:	09db      	lsrs	r3, r3, #7
 8000240:	b2db      	uxtb	r3, r3
 8000242:	60bb      	str	r3, [r7, #8]
	initSEG();
 8000244:	f7ff ff82 	bl	800014c <initSEG>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, segmA);
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	b2db      	uxtb	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000252:	4821      	ldr	r0, [pc, #132]	; (80002d8 <printchar+0x128>)
 8000254:	f003 f8df 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, segmB);
 8000258:	6a3b      	ldr	r3, [r7, #32]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <printchar+0x12c>)
 8000264:	f003 f8d7 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, segmC);
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	461a      	mov	r2, r3
 800026e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000272:	481a      	ldr	r0, [pc, #104]	; (80002dc <printchar+0x12c>)
 8000274:	f003 f8cf 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, segmD);
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	461a      	mov	r2, r3
 800027e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000282:	4816      	ldr	r0, [pc, #88]	; (80002dc <printchar+0x12c>)
 8000284:	f003 f8c7 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, segmE);
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	2104      	movs	r1, #4
 8000290:	4813      	ldr	r0, [pc, #76]	; (80002e0 <printchar+0x130>)
 8000292:	f003 f8c0 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, segmF);
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	2108      	movs	r1, #8
 800029e:	4811      	ldr	r0, [pc, #68]	; (80002e4 <printchar+0x134>)
 80002a0:	f003 f8b9 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, segmG);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	461a      	mov	r2, r3
 80002aa:	2110      	movs	r1, #16
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <printchar+0x134>)
 80002ae:	f003 f8b2 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, segmDP);
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	2120      	movs	r1, #32
 80002ba:	480a      	ldr	r0, [pc, #40]	; (80002e4 <printchar+0x134>)
 80002bc:	f003 f8ab 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIT1_GPIO_Port, Pin, GPIO_PIN_SET);
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	4807      	ldr	r0, [pc, #28]	; (80002e4 <printchar+0x134>)
 80002c8:	f003 f8a5 	bl	8003416 <HAL_GPIO_WritePin>
}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	; 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	08004874 	.word	0x08004874
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40011000 	.word	0x40011000
 80002e0:	40011400 	.word	0x40011400
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <printFigures>:


void printFigures(int number,uint16_t Pin, int leading_zero)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	460b      	mov	r3, r1
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	817b      	strh	r3, [r7, #10]
	printchar(number+48,Pin);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	3330      	adds	r3, #48	; 0x30
 80002fa:	897a      	ldrh	r2, [r7, #10]
 80002fc:	4611      	mov	r1, r2
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff56 	bl	80001b0 <printchar>

	if(!leading_zero)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <printFigures+0x34>
	{
		if(number==0)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d105      	bne.n	800031c <printFigures+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_RESET);
 8000310:	897b      	ldrh	r3, [r7, #10]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <printFigures+0x3c>)
 8000318:	f003 f87d 	bl	8003416 <HAL_GPIO_WritePin>
		}
	}
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40010c00 	.word	0x40010c00

08000328 <affichageDig>:

void affichageDig(int position_compteur,int delai,int position, int limpos,int limneg,int appel)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
 8000334:	603b      	str	r3, [r7, #0]
	initSEG();
 8000336:	f7ff ff09 	bl	800014c <initSEG>
	static int j=0;
	int digit[4];
	int pos=position*6;
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4613      	mov	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	627b      	str	r3, [r7, #36]	; 0x24

	if(appel&&j==0)
 8000346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000348:	2b00      	cmp	r3, #0
 800034a:	d006      	beq.n	800035a <affichageDig+0x32>
 800034c:	4ba7      	ldr	r3, [pc, #668]	; (80005ec <affichageDig+0x2c4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <affichageDig+0x32>
		j=1;
 8000354:	4ba5      	ldr	r3, [pc, #660]	; (80005ec <affichageDig+0x2c4>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
	if(appel)
 800035a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800035c:	2b00      	cmp	r3, #0
 800035e:	d004      	beq.n	800036a <affichageDig+0x42>
		j--;
 8000360:	4ba2      	ldr	r3, [pc, #648]	; (80005ec <affichageDig+0x2c4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4aa1      	ldr	r2, [pc, #644]	; (80005ec <affichageDig+0x2c4>)
 8000368:	6013      	str	r3, [r2, #0]
	if(!appel&&j==4)
 800036a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800036c:	2b00      	cmp	r3, #0
 800036e:	d106      	bne.n	800037e <affichageDig+0x56>
 8000370:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <affichageDig+0x2c4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b04      	cmp	r3, #4
 8000376:	d102      	bne.n	800037e <affichageDig+0x56>
		j=0;
 8000378:	4b9c      	ldr	r3, [pc, #624]	; (80005ec <affichageDig+0x2c4>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	switch (j){
 800037e:	4b9b      	ldr	r3, [pc, #620]	; (80005ec <affichageDig+0x2c4>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b03      	cmp	r3, #3
 8000384:	f200 8263 	bhi.w	800084e <affichageDig+0x526>
 8000388:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <affichageDig+0x68>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080004c7 	.word	0x080004c7
 8000398:	080005fd 	.word	0x080005fd
 800039c:	08000725 	.word	0x08000725

	case 0:
	{
		if(position_compteur==limpos+1)
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d101      	bne.n	80003ae <affichageDig+0x86>
			position_compteur=0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	da0b      	bge.n	80003cc <affichageDig+0xa4>
		{
			printchar('-', DIGIT1_Pin);
 80003b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b8:	202d      	movs	r0, #45	; 0x2d
 80003ba:	f7ff fef9 	bl	80001b0 <printchar>
			if(position_compteur==-(limneg+1))
 80003be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c0:	43db      	mvns	r3, r3
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d101      	bne.n	80003cc <affichageDig+0xa4>
				position_compteur=0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80003d2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80003d6:	4b86      	ldr	r3, [pc, #536]	; (80005f0 <affichageDig+0x2c8>)
 80003d8:	fb83 2301 	smull	r2, r3, r3, r1
 80003dc:	109a      	asrs	r2, r3, #2
 80003de:	17cb      	asrs	r3, r1, #31
 80003e0:	1ad2      	subs	r2, r2, r3
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	1aca      	subs	r2, r1, r3
 80003ec:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80003f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	4a7c      	ldr	r2, [pc, #496]	; (80005f0 <affichageDig+0x2c8>)
 80003fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000402:	1092      	asrs	r2, r2, #2
 8000404:	17db      	asrs	r3, r3, #31
 8000406:	1ad1      	subs	r1, r2, r3
 8000408:	4b79      	ldr	r3, [pc, #484]	; (80005f0 <affichageDig+0x2c8>)
 800040a:	fb83 2301 	smull	r2, r3, r3, r1
 800040e:	109a      	asrs	r2, r3, #2
 8000410:	17cb      	asrs	r3, r1, #31
 8000412:	1ad2      	subs	r2, r2, r3
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	1aca      	subs	r2, r1, r3
 800041e:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000426:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	f06f 0109 	mvn.w	r1, #9
 8000430:	fb01 f303 	mul.w	r3, r1, r3
 8000434:	441a      	add	r2, r3
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a6e      	ldr	r2, [pc, #440]	; (80005f4 <affichageDig+0x2cc>)
 800043c:	fb82 1203 	smull	r1, r2, r2, r3
 8000440:	1152      	asrs	r2, r2, #5
 8000442:	17db      	asrs	r3, r3, #31
 8000444:	1ad1      	subs	r1, r2, r3
 8000446:	4b6a      	ldr	r3, [pc, #424]	; (80005f0 <affichageDig+0x2c8>)
 8000448:	fb83 2301 	smull	r2, r3, r3, r1
 800044c:	109a      	asrs	r2, r3, #2
 800044e:	17cb      	asrs	r3, r1, #31
 8000450:	1ad2      	subs	r2, r2, r3
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	1aca      	subs	r2, r1, r3
 800045c:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000464:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000468:	69fb      	ldr	r3, [r7, #28]
 800046a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800046e:	fb01 f303 	mul.w	r3, r1, r3
 8000472:	441a      	add	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	1ad2      	subs	r2, r2, r3
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	f06f 0109 	mvn.w	r1, #9
 800047e:	fb01 f303 	mul.w	r3, r1, r3
 8000482:	4413      	add	r3, r2
 8000484:	4a5c      	ldr	r2, [pc, #368]	; (80005f8 <affichageDig+0x2d0>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1192      	asrs	r2, r2, #6
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad1      	subs	r1, r2, r3
 8000490:	4b57      	ldr	r3, [pc, #348]	; (80005f0 <affichageDig+0x2c8>)
 8000492:	fb83 2301 	smull	r2, r3, r3, r1
 8000496:	109a      	asrs	r2, r3, #2
 8000498:	17cb      	asrs	r3, r1, #31
 800049a:	1ad2      	subs	r2, r2, r3
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	1aca      	subs	r2, r1, r3
 80004a6:	623a      	str	r2, [r7, #32]
		printFigures(digit[0], DIGIT4_Pin<<pos,1);
 80004a8:	6978      	ldr	r0, [r7, #20]
 80004aa:	2240      	movs	r2, #64	; 0x40
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	f7ff ff16 	bl	80002e8 <printFigures>
		HAL_Delay(delai);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 fafe 	bl	8002ac0 <HAL_Delay>
		break;
 80004c4:	e1c3      	b.n	800084e <affichageDig+0x526>
	}
	case 1:
	{
		if(position_compteur==limpos+1)
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d101      	bne.n	80004d4 <affichageDig+0x1ac>
			position_compteur=0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]


		if(position_compteur<0)
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	da0b      	bge.n	80004f2 <affichageDig+0x1ca>
		{
			printchar('-', DIGIT1_Pin);
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	202d      	movs	r0, #45	; 0x2d
 80004e0:	f7ff fe66 	bl	80001b0 <printchar>
			if(position_compteur==-(limneg+1))
 80004e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e6:	43db      	mvns	r3, r3
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d101      	bne.n	80004f2 <affichageDig+0x1ca>
				position_compteur=0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80004f8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80004fc:	4b3c      	ldr	r3, [pc, #240]	; (80005f0 <affichageDig+0x2c8>)
 80004fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000502:	109a      	asrs	r2, r3, #2
 8000504:	17cb      	asrs	r3, r1, #31
 8000506:	1ad2      	subs	r2, r2, r3
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	1aca      	subs	r2, r1, r3
 8000512:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	4a33      	ldr	r2, [pc, #204]	; (80005f0 <affichageDig+0x2c8>)
 8000524:	fb82 1203 	smull	r1, r2, r2, r3
 8000528:	1092      	asrs	r2, r2, #2
 800052a:	17db      	asrs	r3, r3, #31
 800052c:	1ad1      	subs	r1, r2, r3
 800052e:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <affichageDig+0x2c8>)
 8000530:	fb83 2301 	smull	r2, r3, r3, r1
 8000534:	109a      	asrs	r2, r3, #2
 8000536:	17cb      	asrs	r3, r1, #31
 8000538:	1ad2      	subs	r2, r2, r3
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	1aca      	subs	r2, r1, r3
 8000544:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800054c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	f06f 0109 	mvn.w	r1, #9
 8000556:	fb01 f303 	mul.w	r3, r1, r3
 800055a:	441a      	add	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	4a24      	ldr	r2, [pc, #144]	; (80005f4 <affichageDig+0x2cc>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1152      	asrs	r2, r2, #5
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad1      	subs	r1, r2, r3
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <affichageDig+0x2c8>)
 800056e:	fb83 2301 	smull	r2, r3, r3, r1
 8000572:	109a      	asrs	r2, r3, #2
 8000574:	17cb      	asrs	r3, r1, #31
 8000576:	1ad2      	subs	r2, r2, r3
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	1aca      	subs	r2, r1, r3
 8000582:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800058a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	441a      	add	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	1ad2      	subs	r2, r2, r3
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	f06f 0109 	mvn.w	r1, #9
 80005a4:	fb01 f303 	mul.w	r3, r1, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <affichageDig+0x2d0>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1192      	asrs	r2, r2, #6
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad1      	subs	r1, r2, r3
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <affichageDig+0x2c8>)
 80005b8:	fb83 2301 	smull	r2, r3, r3, r1
 80005bc:	109a      	asrs	r2, r3, #2
 80005be:	17cb      	asrs	r3, r1, #31
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	623a      	str	r2, [r7, #32]
		printFigures(digit[1], DIGIT3_Pin<<pos,1);
 80005ce:	69b8      	ldr	r0, [r7, #24]
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	b29b      	uxth	r3, r3
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff fe83 	bl	80002e8 <printFigures>
		HAL_Delay(delai);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fa6b 	bl	8002ac0 <HAL_Delay>
		break;
 80005ea:	e130      	b.n	800084e <affichageDig+0x526>
 80005ec:	20000038 	.word	0x20000038
 80005f0:	66666667 	.word	0x66666667
 80005f4:	51eb851f 	.word	0x51eb851f
 80005f8:	10624dd3 	.word	0x10624dd3
	}
	case 2:
	{
		if(position_compteur==limpos+1)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	429a      	cmp	r2, r3
 8000604:	d101      	bne.n	800060a <affichageDig+0x2e2>
			position_compteur=0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	da0b      	bge.n	8000628 <affichageDig+0x300>
		{
			printchar('-', DIGIT1_Pin);
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	202d      	movs	r0, #45	; 0x2d
 8000616:	f7ff fdcb 	bl	80001b0 <printchar>
			if(position_compteur==-(limneg+1))
 800061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061c:	43db      	mvns	r3, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d101      	bne.n	8000628 <affichageDig+0x300>
				position_compteur=0;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800062e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000632:	4b8b      	ldr	r3, [pc, #556]	; (8000860 <affichageDig+0x538>)
 8000634:	fb83 2301 	smull	r2, r3, r3, r1
 8000638:	109a      	asrs	r2, r3, #2
 800063a:	17cb      	asrs	r3, r1, #31
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000650:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	4a81      	ldr	r2, [pc, #516]	; (8000860 <affichageDig+0x538>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1092      	asrs	r2, r2, #2
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad1      	subs	r1, r2, r3
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <affichageDig+0x538>)
 8000666:	fb83 2301 	smull	r2, r3, r3, r1
 800066a:	109a      	asrs	r2, r3, #2
 800066c:	17cb      	asrs	r3, r1, #31
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000682:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	f06f 0109 	mvn.w	r1, #9
 800068c:	fb01 f303 	mul.w	r3, r1, r3
 8000690:	441a      	add	r2, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	4a73      	ldr	r2, [pc, #460]	; (8000864 <affichageDig+0x53c>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1152      	asrs	r2, r2, #5
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad1      	subs	r1, r2, r3
 80006a2:	4b6f      	ldr	r3, [pc, #444]	; (8000860 <affichageDig+0x538>)
 80006a4:	fb83 2301 	smull	r2, r3, r3, r1
 80006a8:	109a      	asrs	r2, r3, #2
 80006aa:	17cb      	asrs	r3, r1, #31
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	1aca      	subs	r2, r1, r3
 80006b8:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	441a      	add	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	f06f 0109 	mvn.w	r1, #9
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	4a61      	ldr	r2, [pc, #388]	; (8000868 <affichageDig+0x540>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1192      	asrs	r2, r2, #6
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1ad1      	subs	r1, r2, r3
 80006ec:	4b5c      	ldr	r3, [pc, #368]	; (8000860 <affichageDig+0x538>)
 80006ee:	fb83 2301 	smull	r2, r3, r3, r1
 80006f2:	109a      	asrs	r2, r3, #2
 80006f4:	17cb      	asrs	r3, r1, #31
 80006f6:	1ad2      	subs	r2, r2, r3
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	1aca      	subs	r2, r1, r3
 8000702:	623a      	str	r2, [r7, #32]
		printFigures(digit[2], DIGIT2_Pin<<pos, 1);
 8000704:	69f8      	ldr	r0, [r7, #28]
 8000706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	2201      	movs	r2, #1
 8000714:	4619      	mov	r1, r3
 8000716:	f7ff fde7 	bl	80002e8 <printFigures>
		HAL_Delay(delai);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f9cf 	bl	8002ac0 <HAL_Delay>
		break;
 8000722:	e094      	b.n	800084e <affichageDig+0x526>
	}
	case 3:
	{
		if(position_compteur==limpos+1)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	429a      	cmp	r2, r3
 800072c:	d101      	bne.n	8000732 <affichageDig+0x40a>
			position_compteur=0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	da0c      	bge.n	8000752 <affichageDig+0x42a>
		{
			printchar('-', DIGIT1_Pin);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	202d      	movs	r0, #45	; 0x2d
 800073e:	f7ff fd37 	bl	80001b0 <printchar>
			if(position_compteur==-(limneg+1))
 8000742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000744:	43db      	mvns	r3, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d17b      	bne.n	8000844 <affichageDig+0x51c>
				position_compteur=0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e078      	b.n	8000844 <affichageDig+0x51c>
		}
		else
		{
			digit[0]=abs(position_compteur)%10;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000758:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <affichageDig+0x538>)
 800075e:	fb83 2301 	smull	r2, r3, r3, r1
 8000762:	109a      	asrs	r2, r3, #2
 8000764:	17cb      	asrs	r3, r1, #31
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1aca      	subs	r2, r1, r3
 8000772:	617a      	str	r2, [r7, #20]
			digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800077a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a37      	ldr	r2, [pc, #220]	; (8000860 <affichageDig+0x538>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1092      	asrs	r2, r2, #2
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad1      	subs	r1, r2, r3
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <affichageDig+0x538>)
 8000790:	fb83 2301 	smull	r2, r3, r3, r1
 8000794:	109a      	asrs	r2, r3, #2
 8000796:	17cb      	asrs	r3, r1, #31
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	1aca      	subs	r2, r1, r3
 80007a4:	61ba      	str	r2, [r7, #24]
			digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	f06f 0109 	mvn.w	r1, #9
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	441a      	add	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <affichageDig+0x53c>)
 80007c2:	fb82 1203 	smull	r1, r2, r2, r3
 80007c6:	1152      	asrs	r2, r2, #5
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad1      	subs	r1, r2, r3
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <affichageDig+0x538>)
 80007ce:	fb83 2301 	smull	r2, r3, r3, r1
 80007d2:	109a      	asrs	r2, r3, #2
 80007d4:	17cb      	asrs	r3, r1, #31
 80007d6:	1ad2      	subs	r2, r2, r3
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1aca      	subs	r2, r1, r3
 80007e2:	61fa      	str	r2, [r7, #28]
			digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80007f4:	fb01 f303 	mul.w	r3, r1, r3
 80007f8:	441a      	add	r2, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	f06f 0109 	mvn.w	r1, #9
 8000804:	fb01 f303 	mul.w	r3, r1, r3
 8000808:	4413      	add	r3, r2
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <affichageDig+0x540>)
 800080c:	fb82 1203 	smull	r1, r2, r2, r3
 8000810:	1192      	asrs	r2, r2, #6
 8000812:	17db      	asrs	r3, r3, #31
 8000814:	1ad1      	subs	r1, r2, r3
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <affichageDig+0x538>)
 8000818:	fb83 2301 	smull	r2, r3, r3, r1
 800081c:	109a      	asrs	r2, r3, #2
 800081e:	17cb      	asrs	r3, r1, #31
 8000820:	1ad2      	subs	r2, r2, r3
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	1aca      	subs	r2, r1, r3
 800082c:	623a      	str	r2, [r7, #32]
			printFigures(digit[3], DIGIT1_Pin<<pos, 1);
 800082e:	6a38      	ldr	r0, [r7, #32]
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	b29b      	uxth	r3, r3
 800083c:	2201      	movs	r2, #1
 800083e:	4619      	mov	r1, r3
 8000840:	f7ff fd52 	bl	80002e8 <printFigures>
		}
		HAL_Delay(delai);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4618      	mov	r0, r3
 8000848:	f002 f93a 	bl	8002ac0 <HAL_Delay>
		break;
 800084c:	bf00      	nop
	}
	}
	j++;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <affichageDig+0x544>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <affichageDig+0x544>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	66666667 	.word	0x66666667
 8000864:	51eb851f 	.word	0x51eb851f
 8000868:	10624dd3 	.word	0x10624dd3
 800086c:	20000038 	.word	0x20000038

08000870 <affichageChar>:
void affichageChar(char * word,int delai, int position, int appel)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
	static int i=0;
	int pos=position*6;
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	617b      	str	r3, [r7, #20]
	if(appel&&i==0)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d006      	beq.n	800089e <affichageChar+0x2e>
 8000890:	4b41      	ldr	r3, [pc, #260]	; (8000998 <affichageChar+0x128>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <affichageChar+0x2e>
		i=1;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <affichageChar+0x128>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
	if(appel)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d004      	beq.n	80008ae <affichageChar+0x3e>
		i--;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <affichageChar+0x128>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <affichageChar+0x128>)
 80008ac:	6013      	str	r3, [r2, #0]
	if(!appel&&i==4)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <affichageChar+0x52>
 80008b4:	4b38      	ldr	r3, [pc, #224]	; (8000998 <affichageChar+0x128>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d102      	bne.n	80008c2 <affichageChar+0x52>
		i=0;
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <affichageChar+0x128>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	switch (i){
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <affichageChar+0x128>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d85c      	bhi.n	8000984 <affichageChar+0x114>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <affichageChar+0x60>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e1 	.word	0x080008e1
 80008d4:	0800090b 	.word	0x0800090b
 80008d8:	08000935 	.word	0x08000935
 80008dc:	0800095d 	.word	0x0800095d
	case 0:
	{
		printchar(word[i],DIGIT1_Pin<<pos);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <affichageChar+0x128>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	f7ff fc58 	bl	80001b0 <printchar>
		HAL_Delay(delai);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4618      	mov	r0, r3
 8000904:	f002 f8dc 	bl	8002ac0 <HAL_Delay>
	}
	break;
 8000908:	e03c      	b.n	8000984 <affichageChar+0x114>
	case 1:
	{
		printchar(word[i],DIGIT2_Pin<<pos);
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <affichageChar+0x128>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	b29b      	uxth	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	f7ff fc43 	bl	80001b0 <printchar>
		HAL_Delay(delai);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f002 f8c7 	bl	8002ac0 <HAL_Delay>
	}
	break;
 8000932:	e027      	b.n	8000984 <affichageChar+0x114>
	case 2:
	{
		printchar(word[i],DIGIT3_Pin<<pos);
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <affichageChar+0x128>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	f7ff fc2f 	bl	80001b0 <printchar>
		HAL_Delay(delai);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f8b3 	bl	8002ac0 <HAL_Delay>

	}
	break;
 800095a:	e013      	b.n	8000984 <affichageChar+0x114>
	case 3:
	{
		printchar(word[i],DIGIT4_Pin<<pos);
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <affichageChar+0x128>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	2240      	movs	r2, #64	; 0x40
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	b29b      	uxth	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff fc1b 	bl	80001b0 <printchar>
		HAL_Delay(delai);
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f89f 	bl	8002ac0 <HAL_Delay>
	}
	break;
 8000982:	bf00      	nop
	}
	i++;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <affichageChar+0x128>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a03      	ldr	r2, [pc, #12]	; (8000998 <affichageChar+0x128>)
 800098c:	6013      	str	r3, [r2, #0]
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000003c 	.word	0x2000003c

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09e      	sub	sp, #120	; 0x78
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f002 f82b 	bl	80029fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f001 fc59 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f001 fe05 	bl	80025b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009ae:	f001 fcad 	bl	800230c <MX_ADC1_Init>
  MX_TIM2_Init();
 80009b2:	f001 fce9 	bl	8002388 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009b6:	f001 fd73 	bl	80024a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009ba:	2104      	movs	r1, #4
 80009bc:	489b      	ldr	r0, [pc, #620]	; (8000c2c <main+0x290>)
 80009be:	f003 fa89 	bl	8003ed4 <HAL_TIM_PWM_Start>
 80009c2:	2108      	movs	r1, #8
 80009c4:	4899      	ldr	r0, [pc, #612]	; (8000c2c <main+0x290>)
 80009c6:	f003 fa85 	bl	8003ed4 <HAL_TIM_PWM_Start>
 80009ca:	210c      	movs	r1, #12
 80009cc:	4897      	ldr	r0, [pc, #604]	; (8000c2c <main+0x290>)
 80009ce:	f003 fa81 	bl	8003ed4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009d2:	2100      	movs	r1, #0
 80009d4:	4896      	ldr	r0, [pc, #600]	; (8000c30 <main+0x294>)
 80009d6:	f003 fa7d 	bl	8003ed4 <HAL_TIM_PWM_Start>
 80009da:	2104      	movs	r1, #4
 80009dc:	4894      	ldr	r0, [pc, #592]	; (8000c30 <main+0x294>)
 80009de:	f003 fa79 	bl	8003ed4 <HAL_TIM_PWM_Start>
 80009e2:	2108      	movs	r1, #8
 80009e4:	4892      	ldr	r0, [pc, #584]	; (8000c30 <main+0x294>)
 80009e6:	f003 fa75 	bl	8003ed4 <HAL_TIM_PWM_Start>

	int delai=1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
	int SW1; int SW2;
	int lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	4890      	ldr	r0, [pc, #576]	; (8000c34 <main+0x298>)
 80009f4:	f002 fcf8 	bl	80033e8 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	667b      	str	r3, [r7, #100]	; 0x64
	int lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80009fc:	2104      	movs	r1, #4
 80009fe:	488e      	ldr	r0, [pc, #568]	; (8000c38 <main+0x29c>)
 8000a00:	f002 fcf2 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	663b      	str	r3, [r7, #96]	; 0x60
	int lastBstate=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8000a08:	2102      	movs	r1, #2
 8000a0a:	488b      	ldr	r0, [pc, #556]	; (8000c38 <main+0x29c>)
 8000a0c:	f002 fcec 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	61bb      	str	r3, [r7, #24]
	int lastBbstate=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8000a14:	2102      	movs	r1, #2
 8000a16:	4888      	ldr	r0, [pc, #544]	; (8000c38 <main+0x29c>)
 8000a18:	f002 fce6 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	617b      	str	r3, [r7, #20]
	int lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	4883      	ldr	r0, [pc, #524]	; (8000c34 <main+0x298>)
 8000a26:	f002 fcdf 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	613b      	str	r3, [r7, #16]

	int duty_cycler=5;int duty_cycleg=5;int duty_cycleb=5;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a32:	2305      	movs	r3, #5
 8000a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a36:	2305      	movs	r3, #5
 8000a38:	657b      	str	r3, [r7, #84]	; 0x54
	int duty_cycler2=5;int duty_cycleg2=5;int duty_cycleb2=5;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8000a3e:	2305      	movs	r3, #5
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a42:	2305      	movs	r3, #5
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48

	int frequency=32000000;
 8000a46:	4b7d      	ldr	r3, [pc, #500]	; (8000c3c <main+0x2a0>)
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t autoreload = 1000;
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	60fb      	str	r3, [r7, #12]
	int32_t compare=(duty_cycleb2*autoreload)/100;
 8000a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4a79      	ldr	r2, [pc, #484]	; (8000c40 <main+0x2a4>)
 8000a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5e:	1152      	asrs	r2, r2, #5
 8000a60:	17db      	asrs	r3, r3, #31
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycler2);__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8000a66:	4b71      	ldr	r3, [pc, #452]	; (8000c2c <main+0x290>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	; (8000c2c <main+0x290>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a76:	4b6d      	ldr	r3, [pc, #436]	; (8000c2c <main+0x290>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycler);__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg);__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycleb);
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <main+0x294>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b6a      	ldr	r3, [pc, #424]	; (8000c30 <main+0x294>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a8e:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <main+0x294>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c
	int pulser=1000;int pulseg=1000;int pulseb=1000;
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38

	static int etat=green;
	static int etat2=green2;
	int comptsw=0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
	static int alphaa=50;
	static int couleur=blanc;
	static int appel1=0;
	static int appel2=1;
	static int compt=0;
	int shortpress=FALSE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
	int longpress=FALSE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int shortpress2=FALSE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	int longpress2=FALSE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
	int flag=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
	int sauv=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
	int time=0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2138      	movs	r1, #56	; 0x38
 8000acc:	4859      	ldr	r0, [pc, #356]	; (8000c34 <main+0x298>)
 8000ace:	f002 fca2 	bl	8003416 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Get State of switches
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4858      	ldr	r0, [pc, #352]	; (8000c38 <main+0x29c>)
 8000ad6:	f002 fc87 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	66fb      	str	r3, [r7, #108]	; 0x6c
		SW2= HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8000ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae2:	4854      	ldr	r0, [pc, #336]	; (8000c34 <main+0x298>)
 8000ae4:	f002 fc80 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68

		//Encoder right
		switch(etat)
 8000aec:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <main+0x2a8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	f200 84a2 	bhi.w	800143a <main+0xa9e>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <main+0x160>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000e39 	.word	0x08000e39
 8000b04:	08001043 	.word	0x08001043
 8000b08:	0800124d 	.word	0x0800124d
		{
		case tachefond:
			appel2=0;
 8000b0c:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <main+0x2ac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
			compt++;
 8000b12:	4b4e      	ldr	r3, [pc, #312]	; (8000c4c <main+0x2b0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a4c      	ldr	r2, [pc, #304]	; (8000c4c <main+0x2b0>)
 8000b1a:	6013      	str	r3, [r2, #0]
			if(compt>1000)
 8000b1c:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <main+0x2b0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b24:	dd06      	ble.n	8000b34 <main+0x198>
				affichageChar(" BOW", delai,DROITE,appel1);
 8000b26:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <main+0x2b4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	69f9      	ldr	r1, [r7, #28]
 8000b2e:	4849      	ldr	r0, [pc, #292]	; (8000c54 <main+0x2b8>)
 8000b30:	f7ff fe9e 	bl	8000870 <affichageChar>
			if(compt>2000)
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <main+0x2b0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b3c:	dd02      	ble.n	8000b44 <main+0x1a8>
				compt=0;
 8000b3e:	4b43      	ldr	r3, [pc, #268]	; (8000c4c <main+0x2b0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			if(compt<1000)
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <main+0x2b0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b4c:	da05      	bge.n	8000b5a <main+0x1be>
				affichageChar("RAIN", delai,DROITE,1);
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2201      	movs	r2, #1
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	4840      	ldr	r0, [pc, #256]	; (8000c58 <main+0x2bc>)
 8000b56:	f7ff fe8b 	bl	8000870 <affichageChar>

			switch(couleur)
 8000b5a:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <main+0x2c0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	f200 815d 	bhi.w	8000e1e <main+0x482>
 8000b64:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <main+0x1d0>)
 8000b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000b89 	.word	0x08000b89
 8000b70:	08000c65 	.word	0x08000c65
 8000b74:	08000d0b 	.word	0x08000d0b
 8000b78:	08000dad 	.word	0x08000dad
 8000b7c:	08000bdb 	.word	0x08000bdb
 8000b80:	08000d5d 	.word	0x08000d5d
 8000b84:	08000cb9 	.word	0x08000cb9
			{
				case blanc:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b8a:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <main+0x2c4>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <main+0x294>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9e:	4a30      	ldr	r2, [pc, #192]	; (8000c60 <main+0x2c4>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad2      	subs	r2, r2, r3
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <main+0x294>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <main+0x2c4>)
 8000bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb8:	1092      	asrs	r2, r2, #2
 8000bba:	17db      	asrs	r3, r3, #31
 8000bbc:	1ad2      	subs	r2, r2, r3
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <main+0x294>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 8000bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(pulseg==0)
 8000bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f040 8119 	bne.w	8000e04 <main+0x468>
						couleur=violet;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <main+0x2c0>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	601a      	str	r2, [r3, #0]
					break;
 8000bd8:	e114      	b.n	8000e04 <main+0x468>
				case violet:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <main+0x2c4>)
 8000bde:	fb82 1203 	smull	r1, r2, r2, r3
 8000be2:	1092      	asrs	r2, r2, #2
 8000be4:	17db      	asrs	r3, r3, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <main+0x294>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <main+0x2c4>)
 8000bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf6:	1092      	asrs	r2, r2, #2
 8000bf8:	17db      	asrs	r3, r3, #31
 8000bfa:	1ad2      	subs	r2, r2, r3
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <main+0x294>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <main+0x2c4>)
 8000c06:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0a:	1092      	asrs	r2, r2, #2
 8000c0c:	17db      	asrs	r3, r3, #31
 8000c0e:	1ad2      	subs	r2, r2, r3
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <main+0x294>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
					pulser--;
 8000c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
					if(!pulser)
 8000c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 80f2 	bne.w	8000e08 <main+0x46c>
						couleur=bleu;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <main+0x2c0>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
					break;
 8000c2a:	e0ed      	b.n	8000e08 <main+0x46c>
 8000c2c:	200000c4 	.word	0x200000c4
 8000c30:	2000004c 	.word	0x2000004c
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	01e84800 	.word	0x01e84800
 8000c40:	51eb851f 	.word	0x51eb851f
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	20000040 	.word	0x20000040
 8000c50:	20000044 	.word	0x20000044
 8000c54:	08004814 	.word	0x08004814
 8000c58:	0800481c 	.word	0x0800481c
 8000c5c:	20000048 	.word	0x20000048
 8000c60:	66666667 	.word	0x66666667
				case bleu:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c66:	4a97      	ldr	r2, [pc, #604]	; (8000ec4 <main+0x528>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1092      	asrs	r2, r2, #2
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	4b95      	ldr	r3, [pc, #596]	; (8000ec8 <main+0x52c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	4a92      	ldr	r2, [pc, #584]	; (8000ec4 <main+0x528>)
 8000c7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c80:	1092      	asrs	r2, r2, #2
 8000c82:	17db      	asrs	r3, r3, #31
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	4b90      	ldr	r3, [pc, #576]	; (8000ec8 <main+0x52c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c8e:	4a8d      	ldr	r2, [pc, #564]	; (8000ec4 <main+0x528>)
 8000c90:	fb82 1203 	smull	r1, r2, r2, r3
 8000c94:	1092      	asrs	r2, r2, #2
 8000c96:	17db      	asrs	r3, r3, #31
 8000c98:	1ad2      	subs	r2, r2, r3
 8000c9a:	4b8b      	ldr	r3, [pc, #556]	; (8000ec8 <main+0x52c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 8000ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(pulseg==1000)
 8000ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cac:	f040 80ae 	bne.w	8000e0c <main+0x470>
						couleur=cyan;
 8000cb0:	4b86      	ldr	r3, [pc, #536]	; (8000ecc <main+0x530>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	601a      	str	r2, [r3, #0]
					break;
 8000cb6:	e0a9      	b.n	8000e0c <main+0x470>
				case cyan:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cba:	4a82      	ldr	r2, [pc, #520]	; (8000ec4 <main+0x528>)
 8000cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc0:	1092      	asrs	r2, r2, #2
 8000cc2:	17db      	asrs	r3, r3, #31
 8000cc4:	1ad2      	subs	r2, r2, r3
 8000cc6:	4b80      	ldr	r3, [pc, #512]	; (8000ec8 <main+0x52c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cce:	4a7d      	ldr	r2, [pc, #500]	; (8000ec4 <main+0x528>)
 8000cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd4:	1092      	asrs	r2, r2, #2
 8000cd6:	17db      	asrs	r3, r3, #31
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	4b7b      	ldr	r3, [pc, #492]	; (8000ec8 <main+0x52c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce2:	4a78      	ldr	r2, [pc, #480]	; (8000ec4 <main+0x528>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1092      	asrs	r2, r2, #2
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <main+0x52c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
					pulseb--;
 8000cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
					if(!pulseb)
 8000cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f040 8087 	bne.w	8000e10 <main+0x474>
						couleur=vert;
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <main+0x530>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	601a      	str	r2, [r3, #0]
					break;
 8000d08:	e082      	b.n	8000e10 <main+0x474>
				case vert:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d0c:	4a6d      	ldr	r2, [pc, #436]	; (8000ec4 <main+0x528>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad2      	subs	r2, r2, r3
 8000d18:	4b6b      	ldr	r3, [pc, #428]	; (8000ec8 <main+0x52c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d20:	4a68      	ldr	r2, [pc, #416]	; (8000ec4 <main+0x528>)
 8000d22:	fb82 1203 	smull	r1, r2, r2, r3
 8000d26:	1092      	asrs	r2, r2, #2
 8000d28:	17db      	asrs	r3, r3, #31
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <main+0x52c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d34:	4a63      	ldr	r2, [pc, #396]	; (8000ec4 <main+0x528>)
 8000d36:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3a:	1092      	asrs	r2, r2, #2
 8000d3c:	17db      	asrs	r3, r3, #31
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <main+0x52c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
					pulser++;
 8000d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d48:	3301      	adds	r3, #1
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
					if(pulser==1000)
 8000d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d52:	d15f      	bne.n	8000e14 <main+0x478>
						couleur=jaune;
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <main+0x530>)
 8000d56:	2205      	movs	r2, #5
 8000d58:	601a      	str	r2, [r3, #0]
					break;
 8000d5a:	e05b      	b.n	8000e14 <main+0x478>
				case jaune:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d5e:	4a59      	ldr	r2, [pc, #356]	; (8000ec4 <main+0x528>)
 8000d60:	fb82 1203 	smull	r1, r2, r2, r3
 8000d64:	1092      	asrs	r2, r2, #2
 8000d66:	17db      	asrs	r3, r3, #31
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <main+0x52c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d72:	4a54      	ldr	r2, [pc, #336]	; (8000ec4 <main+0x528>)
 8000d74:	fb82 1203 	smull	r1, r2, r2, r3
 8000d78:	1092      	asrs	r2, r2, #2
 8000d7a:	17db      	asrs	r3, r3, #31
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <main+0x52c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d86:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <main+0x528>)
 8000d88:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8c:	1092      	asrs	r2, r2, #2
 8000d8e:	17db      	asrs	r3, r3, #31
 8000d90:	1ad2      	subs	r2, r2, r3
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <main+0x52c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 8000d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(!pulseg)
 8000d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d139      	bne.n	8000e18 <main+0x47c>
						couleur=rouge;
 8000da4:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <main+0x530>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	601a      	str	r2, [r3, #0]
					break;
 8000daa:	e035      	b.n	8000e18 <main+0x47c>
				case rouge:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dae:	4a45      	ldr	r2, [pc, #276]	; (8000ec4 <main+0x528>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1092      	asrs	r2, r2, #2
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad2      	subs	r2, r2, r3
 8000dba:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <main+0x52c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc2:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <main+0x528>)
 8000dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc8:	1092      	asrs	r2, r2, #2
 8000dca:	17db      	asrs	r3, r3, #31
 8000dcc:	1ad2      	subs	r2, r2, r3
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <main+0x52c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd6:	4a3b      	ldr	r2, [pc, #236]	; (8000ec4 <main+0x528>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1092      	asrs	r2, r2, #2
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad2      	subs	r2, r2, r3
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <main+0x52c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 8000de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dea:	3301      	adds	r3, #1
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
					pulseb++;
 8000dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000df0:	3301      	adds	r3, #1
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
					if(pulseg==1000)
 8000df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dfa:	d10f      	bne.n	8000e1c <main+0x480>
						couleur=blanc;
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <main+0x530>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
					break;
 8000e02:	e00b      	b.n	8000e1c <main+0x480>
					break;
 8000e04:	bf00      	nop
 8000e06:	e00a      	b.n	8000e1e <main+0x482>
					break;
 8000e08:	bf00      	nop
 8000e0a:	e008      	b.n	8000e1e <main+0x482>
					break;
 8000e0c:	bf00      	nop
 8000e0e:	e006      	b.n	8000e1e <main+0x482>
					break;
 8000e10:	bf00      	nop
 8000e12:	e004      	b.n	8000e1e <main+0x482>
					break;
 8000e14:	bf00      	nop
 8000e16:	e002      	b.n	8000e1e <main+0x482>
					break;
 8000e18:	bf00      	nop
 8000e1a:	e000      	b.n	8000e1e <main+0x482>
					break;
 8000e1c:	bf00      	nop
			}
			if(SW1==0)
 8000e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 8303 	bne.w	800142c <main+0xa90>
			{
				initSEG();
 8000e26:	f7ff f991 	bl	800014c <initSEG>
				HAL_Delay(DelaiNextState);
 8000e2a:	20fa      	movs	r0, #250	; 0xfa
 8000e2c:	f001 fe48 	bl	8002ac0 <HAL_Delay>
				etat=green;
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <main+0x534>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e36:	e2f9      	b.n	800142c <main+0xa90>
			case green:

				HAL_GPIO_WritePin(DIAL_B_GPIO_Port, DIAL_B_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <main+0x538>)
 8000e40:	f002 fae9 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_R_GPIO_Port, DIAL_R_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <main+0x538>)
 8000e4c:	f002 fae3 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_G_GPIO_Port, DIAL_G_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <main+0x538>)
 8000e58:	f002 fadd 	bl	8003416 <HAL_GPIO_WritePin>

				compt++;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <main+0x53c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <main+0x53c>)
 8000e64:	6013      	str	r3, [r2, #0]
				appel2=1;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x540>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <main+0x544>)
 8000e70:	f002 faba 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d039      	beq.n	8000ef2 <main+0x556>
				{
					if(lastState1==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <main+0x544>)
 8000e82:	f002 fab1 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d109      	bne.n	8000ea4 <main+0x508>
					{
							if (duty_cycleg<=0)
 8000e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dc02      	bgt.n	8000e9c <main+0x500>
								duty_cycleg=0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e9a:	e026      	b.n	8000eea <main+0x54e>
							else
								duty_cycleg-=1;
 8000e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ea2:	e022      	b.n	8000eea <main+0x54e>
					}
					else
					{

						if(lastState1!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <main+0x544>)
 8000ea8:	f002 fa9e 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <main+0x54e>
						{
							if (duty_cycleg>=100)
 8000eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb8:	2b63      	cmp	r3, #99	; 0x63
 8000eba:	dd13      	ble.n	8000ee4 <main+0x548>
								duty_cycleg=100;
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ec0:	e013      	b.n	8000eea <main+0x54e>
 8000ec2:	bf00      	nop
 8000ec4:	66666667 	.word	0x66666667
 8000ec8:	2000004c 	.word	0x2000004c
 8000ecc:	20000048 	.word	0x20000048
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	20000040 	.word	0x20000040
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	40010c00 	.word	0x40010c00
							else
								duty_cycleg+=1;
 8000ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	65bb      	str	r3, [r7, #88]	; 0x58
						}
					}
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg);
 8000eea:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <main+0x7bc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
				}
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4899      	ldr	r0, [pc, #612]	; (800115c <main+0x7c0>)
 8000ef6:	f002 fa77 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	663b      	str	r3, [r7, #96]	; 0x60
				if(compt>1000)
 8000efe:	4b98      	ldr	r3, [pc, #608]	; (8001160 <main+0x7c4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f06:	dd0a      	ble.n	8000f1e <main+0x582>
					affichageDig(duty_cycleg, delai,DROITE,100,0,appel1);
 8000f08:	4b96      	ldr	r3, [pc, #600]	; (8001164 <main+0x7c8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	2201      	movs	r2, #1
 8000f16:	69f9      	ldr	r1, [r7, #28]
 8000f18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000f1a:	f7ff fa05 	bl	8000328 <affichageDig>
				if(compt>2000)
 8000f1e:	4b90      	ldr	r3, [pc, #576]	; (8001160 <main+0x7c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f26:	dd02      	ble.n	8000f2e <main+0x592>
					compt=0;
 8000f28:	4b8d      	ldr	r3, [pc, #564]	; (8001160 <main+0x7c4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <main+0x7c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f36:	da06      	bge.n	8000f46 <main+0x5aa>
					affichageChar("GREE", delai,DROITE,appel1);
 8000f38:	4b8a      	ldr	r3, [pc, #552]	; (8001164 <main+0x7c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69f9      	ldr	r1, [r7, #28]
 8000f40:	4889      	ldr	r0, [pc, #548]	; (8001168 <main+0x7cc>)
 8000f42:	f7ff fc95 	bl	8000870 <affichageChar>

				SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000f46:	2101      	movs	r1, #1
 8000f48:	4884      	ldr	r0, [pc, #528]	; (800115c <main+0x7c0>)
 8000f4a:	f002 fa4d 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	66fb      	str	r3, [r7, #108]	; 0x6c
				if(!SW1 && !longpress && !shortpress)
 8000f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d151      	bne.n	8000ffc <main+0x660>
 8000f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d14e      	bne.n	8000ffc <main+0x660>
 8000f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d14b      	bne.n	8000ffc <main+0x660>
				{
					flag=1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8000f68:	f001 fda0 	bl	8002aac <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	607b      	str	r3, [r7, #4]
					while(SW1==0 && flag==1)
 8000f70:	e03e      	b.n	8000ff0 <main+0x654>
					{
						time=HAL_GetTick();
 8000f72:	f001 fd9b 	bl	8002aac <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b1e      	cmp	r3, #30
 8000f82:	dd0f      	ble.n	8000fa4 <main+0x608>
						{
							shortpress=TRUE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
							longpress=FALSE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
							if(time-sauv>1000)
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	dd05      	ble.n	8000fa4 <main+0x608>
							{
								shortpress=FALSE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
								longpress=TRUE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
								flag=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000fae:	da0c      	bge.n	8000fca <main+0x62e>
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2bc8      	cmp	r3, #200	; 0xc8
 8000fb8:	dd07      	ble.n	8000fca <main+0x62e>
							affichageChar("MODE", delai,DROITE,appel1);
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <main+0x7c8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	69f9      	ldr	r1, [r7, #28]
 8000fc2:	486a      	ldr	r0, [pc, #424]	; (800116c <main+0x7d0>)
 8000fc4:	f7ff fc54 	bl	8000870 <affichageChar>
 8000fc8:	e00c      	b.n	8000fe4 <main+0x648>
						else
							affichageDig((time-sauv), delai,DROITE,100,0,appel1);
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1ad0      	subs	r0, r2, r3
 8000fd0:	4b64      	ldr	r3, [pc, #400]	; (8001164 <main+0x7c8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69f9      	ldr	r1, [r7, #28]
 8000fe0:	f7ff f9a2 	bl	8000328 <affichageDig>
						SW1=HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	485d      	ldr	r0, [pc, #372]	; (800115c <main+0x7c0>)
 8000fe8:	f002 f9fe 	bl	80033e8 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	66fb      	str	r3, [r7, #108]	; 0x6c
					while(SW1==0 && flag==1)
 8000ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <main+0x660>
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0ba      	beq.n	8000f72 <main+0x5d6>
					}
				}
				if(shortpress && SW1==1)
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00c      	beq.n	800101c <main+0x680>
 8001002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001004:	2b01      	cmp	r3, #1
 8001006:	d109      	bne.n	800101c <main+0x680>
				{
					HAL_Delay(DelaiNextState);
 8001008:	20fa      	movs	r0, #250	; 0xfa
 800100a:	f001 fd59 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
					etat=red;
 8001016:	4b56      	ldr	r3, [pc, #344]	; (8001170 <main+0x7d4>)
 8001018:	2202      	movs	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
				}
				if(longpress && SW1==1)
 800101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8206 	beq.w	8001430 <main+0xa94>
 8001024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001026:	2b01      	cmp	r3, #1
 8001028:	f040 8202 	bne.w	8001430 <main+0xa94>
				{
					HAL_Delay(DelaiNextState);
 800102c:	20fa      	movs	r0, #250	; 0xfa
 800102e:	f001 fd47 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
					etat=tachefond;
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <main+0x7d4>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
				}
				break;
 8001040:	e1f6      	b.n	8001430 <main+0xa94>


			case red:
				HAL_GPIO_WritePin(DIAL_B_GPIO_Port, DIAL_B_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	484a      	ldr	r0, [pc, #296]	; (8001174 <main+0x7d8>)
 800104a:	f002 f9e4 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_G_GPIO_Port, DIAL_G_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	4847      	ldr	r0, [pc, #284]	; (8001174 <main+0x7d8>)
 8001056:	f002 f9de 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_R_GPIO_Port, DIAL_R_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001060:	4844      	ldr	r0, [pc, #272]	; (8001174 <main+0x7d8>)
 8001062:	f002 f9d8 	bl	8003416 <HAL_GPIO_WritePin>
				compt++;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <main+0x7c4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <main+0x7c4>)
 800106e:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x7c4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	dd0a      	ble.n	8001090 <main+0x6f4>
					affichageDig(duty_cycler, delai,DROITE,100,0,appel1);
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <main+0x7c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2300      	movs	r3, #0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2201      	movs	r2, #1
 8001088:	69f9      	ldr	r1, [r7, #28]
 800108a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800108c:	f7ff f94c 	bl	8000328 <affichageDig>
				if(compt>2000)
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <main+0x7c4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001098:	dd02      	ble.n	80010a0 <main+0x704>
					compt=0;
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <main+0x7c4>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <main+0x7c4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a8:	da06      	bge.n	80010b8 <main+0x71c>
					affichageChar(" RED", delai,DROITE,appel1);
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <main+0x7c8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	69f9      	ldr	r1, [r7, #28]
 80010b2:	4831      	ldr	r0, [pc, #196]	; (8001178 <main+0x7dc>)
 80010b4:	f7ff fbdc 	bl	8000870 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 80010b8:	2104      	movs	r1, #4
 80010ba:	4828      	ldr	r0, [pc, #160]	; (800115c <main+0x7c0>)
 80010bc:	f002 f994 	bl	80033e8 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <main+0x76e>
				{
					if(lastState1==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80010ca:	2102      	movs	r1, #2
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <main+0x7c0>)
 80010ce:	f002 f98b 	bl	80033e8 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d8:	4293      	cmp	r3, r2
 80010da:	d109      	bne.n	80010f0 <main+0x754>
					{
						if (duty_cycler<=0)
 80010dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dc02      	bgt.n	80010e8 <main+0x74c>
							duty_cycler=0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010e6:	e00c      	b.n	8001102 <main+0x766>
						else
							duty_cycler-=1;
 80010e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ea:	3b01      	subs	r3, #1
 80010ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010ee:	e008      	b.n	8001102 <main+0x766>
					}
					else
					{
						if (duty_cycler>=100)
 80010f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010f2:	2b63      	cmp	r3, #99	; 0x63
 80010f4:	dd02      	ble.n	80010fc <main+0x760>
							duty_cycler=100;
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010fa:	e002      	b.n	8001102 <main+0x766>
						else
							duty_cycler+=1;
 80010fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010fe:	3301      	adds	r3, #1
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
					}
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler);
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <main+0x7bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800110a:	2104      	movs	r1, #4
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <main+0x7c0>)
 800110e:	f002 f96b 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	663b      	str	r3, [r7, #96]	; 0x60
				lastBstate=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8001116:	2102      	movs	r1, #2
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <main+0x7c0>)
 800111a:	f002 f965 	bl	80033e8 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]

				SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8001122:	2101      	movs	r1, #1
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <main+0x7c0>)
 8001126:	f002 f95f 	bl	80033e8 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	66fb      	str	r3, [r7, #108]	; 0x6c
				sauv=0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
				time=0;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
				if(!SW1 && !longpress && !shortpress)
 8001136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d164      	bne.n	8001206 <main+0x86a>
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d161      	bne.n	8001206 <main+0x86a>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2b00      	cmp	r3, #0
 8001146:	d15e      	bne.n	8001206 <main+0x86a>
				{
					flag=1;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 800114c:	f001 fcae 	bl	8002aac <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	607b      	str	r3, [r7, #4]
					while(SW1==0 && flag==1)
 8001154:	e051      	b.n	80011fa <main+0x85e>
 8001156:	bf00      	nop
 8001158:	2000004c 	.word	0x2000004c
 800115c:	40010c00 	.word	0x40010c00
 8001160:	20000040 	.word	0x20000040
 8001164:	20000044 	.word	0x20000044
 8001168:	08004824 	.word	0x08004824
 800116c:	0800482c 	.word	0x0800482c
 8001170:	20000000 	.word	0x20000000
 8001174:	40010800 	.word	0x40010800
 8001178:	08004834 	.word	0x08004834
					{
						time=HAL_GetTick();
 800117c:	f001 fc96 	bl	8002aac <HAL_GetTick>
 8001180:	4603      	mov	r3, r0
 8001182:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b1e      	cmp	r3, #30
 800118c:	dd0f      	ble.n	80011ae <main+0x812>
						{
							shortpress=TRUE;
 800118e:	2301      	movs	r3, #1
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
							longpress=FALSE;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
							if(time-sauv>1000)
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a0:	dd05      	ble.n	80011ae <main+0x812>
							{
								shortpress=FALSE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
								longpress=TRUE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
								flag=0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011b8:	da0c      	bge.n	80011d4 <main+0x838>
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2bc8      	cmp	r3, #200	; 0xc8
 80011c2:	dd07      	ble.n	80011d4 <main+0x838>
							affichageChar("MODE", delai,DROITE,appel1);
 80011c4:	4ba8      	ldr	r3, [pc, #672]	; (8001468 <main+0xacc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2201      	movs	r2, #1
 80011ca:	69f9      	ldr	r1, [r7, #28]
 80011cc:	48a7      	ldr	r0, [pc, #668]	; (800146c <main+0xad0>)
 80011ce:	f7ff fb4f 	bl	8000870 <affichageChar>
 80011d2:	e00c      	b.n	80011ee <main+0x852>
						else
							affichageDig((time-sauv), delai,DROITE,100,0,appel1);
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad0      	subs	r0, r2, r3
 80011da:	4ba3      	ldr	r3, [pc, #652]	; (8001468 <main+0xacc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	2201      	movs	r2, #1
 80011e8:	69f9      	ldr	r1, [r7, #28]
 80011ea:	f7ff f89d 	bl	8000328 <affichageDig>
						SW1=HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 80011ee:	2101      	movs	r1, #1
 80011f0:	489f      	ldr	r0, [pc, #636]	; (8001470 <main+0xad4>)
 80011f2:	f002 f8f9 	bl	80033e8 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	66fb      	str	r3, [r7, #108]	; 0x6c
					while(SW1==0 && flag==1)
 80011fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <main+0x86a>
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d0ba      	beq.n	800117c <main+0x7e0>
					}
				}
				if(shortpress && SW1==1)
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <main+0x88a>
 800120c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800120e:	2b01      	cmp	r3, #1
 8001210:	d109      	bne.n	8001226 <main+0x88a>
				{
					HAL_Delay(DelaiNextState);
 8001212:	20fa      	movs	r0, #250	; 0xfa
 8001214:	f001 fc54 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
					etat=blue;
 8001220:	4b94      	ldr	r3, [pc, #592]	; (8001474 <main+0xad8>)
 8001222:	2203      	movs	r2, #3
 8001224:	601a      	str	r2, [r3, #0]
				}
				if(longpress && SW1==1)
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 8103 	beq.w	8001434 <main+0xa98>
 800122e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80ff 	bne.w	8001434 <main+0xa98>
				{
					HAL_Delay(DelaiNextState);
 8001236:	20fa      	movs	r0, #250	; 0xfa
 8001238:	f001 fc42 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
					etat=tachefond;
 8001244:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <main+0xad8>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
				}
				break;
 800124a:	e0f3      	b.n	8001434 <main+0xa98>


			case blue:
				HAL_GPIO_WritePin(DIAL_G_GPIO_Port, DIAL_G_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4889      	ldr	r0, [pc, #548]	; (8001478 <main+0xadc>)
 8001254:	f002 f8df 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_R_GPIO_Port, DIAL_R_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125e:	4886      	ldr	r0, [pc, #536]	; (8001478 <main+0xadc>)
 8001260:	f002 f8d9 	bl	8003416 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIAL_B_GPIO_Port, DIAL_B_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	4883      	ldr	r0, [pc, #524]	; (8001478 <main+0xadc>)
 800126c:	f002 f8d3 	bl	8003416 <HAL_GPIO_WritePin>
				compt++;
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <main+0xae0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a81      	ldr	r2, [pc, #516]	; (800147c <main+0xae0>)
 8001278:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 800127a:	4b80      	ldr	r3, [pc, #512]	; (800147c <main+0xae0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001282:	dd0a      	ble.n	800129a <main+0x8fe>
					affichageDig(duty_cycleb, delai,DROITE,100,0,appel1);
 8001284:	4b78      	ldr	r3, [pc, #480]	; (8001468 <main+0xacc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2201      	movs	r2, #1
 8001292:	69f9      	ldr	r1, [r7, #28]
 8001294:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001296:	f7ff f847 	bl	8000328 <affichageDig>
				if(compt>2000)
 800129a:	4b78      	ldr	r3, [pc, #480]	; (800147c <main+0xae0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012a2:	dd02      	ble.n	80012aa <main+0x90e>
				{
					compt=0;
 80012a4:	4b75      	ldr	r3, [pc, #468]	; (800147c <main+0xae0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
				}
				if(compt<1000)
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <main+0xae0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b2:	da06      	bge.n	80012c2 <main+0x926>
				{
					affichageChar("BLUE", delai,DROITE,appel1);
 80012b4:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <main+0xacc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	69f9      	ldr	r1, [r7, #28]
 80012bc:	4870      	ldr	r0, [pc, #448]	; (8001480 <main+0xae4>)
 80012be:	f7ff fad7 	bl	8000870 <affichageChar>
				}

				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 80012c2:	2104      	movs	r1, #4
 80012c4:	486a      	ldr	r0, [pc, #424]	; (8001470 <main+0xad4>)
 80012c6:	f002 f88f 	bl	80033e8 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d01f      	beq.n	8001314 <main+0x978>
				{
					if(lastState1==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80012d4:	2102      	movs	r1, #2
 80012d6:	4866      	ldr	r0, [pc, #408]	; (8001470 <main+0xad4>)
 80012d8:	f002 f886 	bl	80033e8 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d109      	bne.n	80012fa <main+0x95e>
					{
						if (duty_cycleb<=0)
 80012e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dc02      	bgt.n	80012f2 <main+0x956>
							duty_cycleb=0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	657b      	str	r3, [r7, #84]	; 0x54
 80012f0:	e00c      	b.n	800130c <main+0x970>
						else
							duty_cycleb-=1;
 80012f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f4:	3b01      	subs	r3, #1
 80012f6:	657b      	str	r3, [r7, #84]	; 0x54
 80012f8:	e008      	b.n	800130c <main+0x970>
					}
					else
					{
						if (duty_cycleb>=100)
 80012fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012fc:	2b63      	cmp	r3, #99	; 0x63
 80012fe:	dd02      	ble.n	8001306 <main+0x96a>
							duty_cycleb=100;
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	657b      	str	r3, [r7, #84]	; 0x54
 8001304:	e002      	b.n	800130c <main+0x970>
						else
							duty_cycleb+=1;
 8001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001308:	3301      	adds	r3, #1
 800130a:	657b      	str	r3, [r7, #84]	; 0x54
					}
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb);
 800130c:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <main+0xae8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
				}
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001314:	2104      	movs	r1, #4
 8001316:	4856      	ldr	r0, [pc, #344]	; (8001470 <main+0xad4>)
 8001318:	f002 f866 	bl	80033e8 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	663b      	str	r3, [r7, #96]	; 0x60
				lastBstate=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8001320:	2102      	movs	r1, #2
 8001322:	4853      	ldr	r0, [pc, #332]	; (8001470 <main+0xad4>)
 8001324:	f002 f860 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	61bb      	str	r3, [r7, #24]

				SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 800132c:	2101      	movs	r1, #1
 800132e:	4850      	ldr	r0, [pc, #320]	; (8001470 <main+0xad4>)
 8001330:	f002 f85a 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	66fb      	str	r3, [r7, #108]	; 0x6c
				sauv=0;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
				time=0;
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
				if(!SW1 && !longpress && !shortpress)
 8001340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001342:	2b00      	cmp	r3, #0
 8001344:	d151      	bne.n	80013ea <main+0xa4e>
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	2b00      	cmp	r3, #0
 800134a:	d14e      	bne.n	80013ea <main+0xa4e>
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	2b00      	cmp	r3, #0
 8001350:	d14b      	bne.n	80013ea <main+0xa4e>
				{
					flag=1;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8001356:	f001 fba9 	bl	8002aac <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	607b      	str	r3, [r7, #4]
					while(SW1==0 && flag==1)
 800135e:	e03e      	b.n	80013de <main+0xa42>
					{
						time=HAL_GetTick();
 8001360:	f001 fba4 	bl	8002aac <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b1e      	cmp	r3, #30
 8001370:	dd0f      	ble.n	8001392 <main+0x9f6>
						{
							shortpress=TRUE;
 8001372:	2301      	movs	r3, #1
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
							longpress=FALSE;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
							if(time-sauv>1000)
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001384:	dd05      	ble.n	8001392 <main+0x9f6>
							{
								shortpress=FALSE;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
								longpress=TRUE;
 800138a:	2301      	movs	r3, #1
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
								flag=0;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800139c:	da0c      	bge.n	80013b8 <main+0xa1c>
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2bc8      	cmp	r3, #200	; 0xc8
 80013a6:	dd07      	ble.n	80013b8 <main+0xa1c>
							affichageChar("MODE", delai,DROITE,appel1);
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <main+0xacc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	482e      	ldr	r0, [pc, #184]	; (800146c <main+0xad0>)
 80013b2:	f7ff fa5d 	bl	8000870 <affichageChar>
 80013b6:	e00c      	b.n	80013d2 <main+0xa36>
						else
							affichageDig((time-sauv), delai,DROITE,100,0,appel1);
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1ad0      	subs	r0, r2, r3
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <main+0xacc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	2201      	movs	r2, #1
 80013cc:	69f9      	ldr	r1, [r7, #28]
 80013ce:	f7fe ffab 	bl	8000328 <affichageDig>
						SW1=HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 80013d2:	2101      	movs	r1, #1
 80013d4:	4826      	ldr	r0, [pc, #152]	; (8001470 <main+0xad4>)
 80013d6:	f002 f807 	bl	80033e8 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	66fb      	str	r3, [r7, #108]	; 0x6c
					while(SW1==0 && flag==1)
 80013de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <main+0xa4e>
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0ba      	beq.n	8001360 <main+0x9c4>
					}
				}
				if(shortpress && SW1==1)
 80013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <main+0xa6e>
 80013f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d109      	bne.n	800140a <main+0xa6e>
				{
					HAL_Delay(DelaiNextState);
 80013f6:	20fa      	movs	r0, #250	; 0xfa
 80013f8:	f001 fb62 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
					etat=green;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <main+0xad8>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
				}
				if(longpress && SW1==1)
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <main+0xa9c>
 8001410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001412:	2b01      	cmp	r3, #1
 8001414:	d110      	bne.n	8001438 <main+0xa9c>
				{
					HAL_Delay(DelaiNextState);
 8001416:	20fa      	movs	r0, #250	; 0xfa
 8001418:	f001 fb52 	bl	8002ac0 <HAL_Delay>
					longpress=FALSE;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
					shortpress=FALSE;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
					etat=tachefond;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <main+0xad8>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
				}
				break;
 800142a:	e005      	b.n	8001438 <main+0xa9c>
			break;
 800142c:	bf00      	nop
 800142e:	e004      	b.n	800143a <main+0xa9e>
				break;
 8001430:	bf00      	nop
 8001432:	e002      	b.n	800143a <main+0xa9e>
				break;
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <main+0xa9e>
				break;
 8001438:	bf00      	nop
		}
		// Encoder Switch left
			switch (etat2)
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <main+0xaec>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b06      	cmp	r3, #6
 8001440:	f63f ab47 	bhi.w	8000ad2 <main+0x136>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <main+0xab0>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	08001d73 	.word	0x08001d73
 8001450:	08001b79 	.word	0x08001b79
 8001454:	080017a3 	.word	0x080017a3
 8001458:	080019a5 	.word	0x080019a5
 800145c:	08001f9f 	.word	0x08001f9f
 8001460:	08000ad3 	.word	0x08000ad3
 8001464:	0800148d 	.word	0x0800148d
 8001468:	20000044 	.word	0x20000044
 800146c:	0800482c 	.word	0x0800482c
 8001470:	40010c00 	.word	0x40010c00
 8001474:	20000000 	.word	0x20000000
 8001478:	40010800 	.word	0x40010800
 800147c:	20000040 	.word	0x20000040
 8001480:	0800483c 	.word	0x0800483c
 8001484:	2000004c 	.word	0x2000004c
 8001488:	20000008 	.word	0x20000008
			{
				case tachefond2:
					appel2=0;
 800148c:	4b99      	ldr	r3, [pc, #612]	; (80016f4 <main+0xd58>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
					compt++;
 8001492:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <main+0xd5c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a97      	ldr	r2, [pc, #604]	; (80016f8 <main+0xd5c>)
 800149a:	6013      	str	r3, [r2, #0]
					if(compt>1000)
 800149c:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <main+0xd5c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a4:	dd06      	ble.n	80014b4 <main+0xb18>
						affichageChar(" BOW", delai,GAUCHE,appel1);
 80014a6:	4b95      	ldr	r3, [pc, #596]	; (80016fc <main+0xd60>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	69f9      	ldr	r1, [r7, #28]
 80014ae:	4894      	ldr	r0, [pc, #592]	; (8001700 <main+0xd64>)
 80014b0:	f7ff f9de 	bl	8000870 <affichageChar>
					if(compt>2000)
 80014b4:	4b90      	ldr	r3, [pc, #576]	; (80016f8 <main+0xd5c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014bc:	dd02      	ble.n	80014c4 <main+0xb28>
						compt=0;
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <main+0xd5c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
					if(compt<1000)
 80014c4:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <main+0xd5c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014cc:	da05      	bge.n	80014da <main+0xb3e>
						affichageChar("RAIN", delai,GAUCHE,1);
 80014ce:	2301      	movs	r3, #1
 80014d0:	2200      	movs	r2, #0
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	488b      	ldr	r0, [pc, #556]	; (8001704 <main+0xd68>)
 80014d6:	f7ff f9cb 	bl	8000870 <affichageChar>

					switch(couleur)
 80014da:	4b8b      	ldr	r3, [pc, #556]	; (8001708 <main+0xd6c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	f200 8151 	bhi.w	8001786 <main+0xdea>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <main+0xb50>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	08001509 	.word	0x08001509
 80014f0:	080015ad 	.word	0x080015ad
 80014f4:	08001653 	.word	0x08001653
 80014f8:	08001715 	.word	0x08001715
 80014fc:	0800155b 	.word	0x0800155b
 8001500:	080016a5 	.word	0x080016a5
 8001504:	08001601 	.word	0x08001601
					{
						case blanc:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 8001508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150a:	4a80      	ldr	r2, [pc, #512]	; (800170c <main+0xd70>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1092      	asrs	r2, r2, #2
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad2      	subs	r2, r2, r3
 8001516:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <main+0xd74>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 800151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151e:	4a7b      	ldr	r2, [pc, #492]	; (800170c <main+0xd70>)
 8001520:	fb82 1203 	smull	r1, r2, r2, r3
 8001524:	1092      	asrs	r2, r2, #2
 8001526:	17db      	asrs	r3, r3, #31
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	4b79      	ldr	r3, [pc, #484]	; (8001710 <main+0xd74>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 8001530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001532:	4a76      	ldr	r2, [pc, #472]	; (800170c <main+0xd70>)
 8001534:	fb82 1203 	smull	r1, r2, r2, r3
 8001538:	1092      	asrs	r2, r2, #2
 800153a:	17db      	asrs	r3, r3, #31
 800153c:	1ad2      	subs	r2, r2, r3
 800153e:	4b74      	ldr	r3, [pc, #464]	; (8001710 <main+0xd74>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
							pulseg--;
 8001544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001546:	3b01      	subs	r3, #1
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
							if(pulseg==0)
 800154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 810d 	bne.w	800176c <main+0xdd0>
								couleur=violet;
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <main+0xd6c>)
 8001554:	2204      	movs	r2, #4
 8001556:	601a      	str	r2, [r3, #0]
							break;
 8001558:	e108      	b.n	800176c <main+0xdd0>
						case violet:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 800155a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155c:	4a6b      	ldr	r2, [pc, #428]	; (800170c <main+0xd70>)
 800155e:	fb82 1203 	smull	r1, r2, r2, r3
 8001562:	1092      	asrs	r2, r2, #2
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ad2      	subs	r2, r2, r3
 8001568:	4b69      	ldr	r3, [pc, #420]	; (8001710 <main+0xd74>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001570:	4a66      	ldr	r2, [pc, #408]	; (800170c <main+0xd70>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	1092      	asrs	r2, r2, #2
 8001578:	17db      	asrs	r3, r3, #31
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	4b64      	ldr	r3, [pc, #400]	; (8001710 <main+0xd74>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 8001582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001584:	4a61      	ldr	r2, [pc, #388]	; (800170c <main+0xd70>)
 8001586:	fb82 1203 	smull	r1, r2, r2, r3
 800158a:	1092      	asrs	r2, r2, #2
 800158c:	17db      	asrs	r3, r3, #31
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <main+0xd74>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
							pulser--;
 8001596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001598:	3b01      	subs	r3, #1
 800159a:	643b      	str	r3, [r7, #64]	; 0x40
							if(!pulser)
 800159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80e6 	bne.w	8001770 <main+0xdd4>
								couleur=bleu;
 80015a4:	4b58      	ldr	r3, [pc, #352]	; (8001708 <main+0xd6c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
							break;
 80015aa:	e0e1      	b.n	8001770 <main+0xdd4>
						case bleu:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 80015ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ae:	4a57      	ldr	r2, [pc, #348]	; (800170c <main+0xd70>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1092      	asrs	r2, r2, #2
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad2      	subs	r2, r2, r3
 80015ba:	4b55      	ldr	r3, [pc, #340]	; (8001710 <main+0xd74>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 80015c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c2:	4a52      	ldr	r2, [pc, #328]	; (800170c <main+0xd70>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1092      	asrs	r2, r2, #2
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	4b50      	ldr	r3, [pc, #320]	; (8001710 <main+0xd74>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 80015d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <main+0xd70>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	1092      	asrs	r2, r2, #2
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1ad2      	subs	r2, r2, r3
 80015e2:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <main+0xd74>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
							pulseg++;
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	3301      	adds	r3, #1
 80015ec:	63fb      	str	r3, [r7, #60]	; 0x3c
							if(pulseg==1000)
 80015ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f4:	f040 80be 	bne.w	8001774 <main+0xdd8>
								couleur=cyan;
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <main+0xd6c>)
 80015fa:	2206      	movs	r2, #6
 80015fc:	601a      	str	r2, [r3, #0]
							break;
 80015fe:	e0b9      	b.n	8001774 <main+0xdd8>
						case cyan:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 8001600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001602:	4a42      	ldr	r2, [pc, #264]	; (800170c <main+0xd70>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad2      	subs	r2, r2, r3
 800160e:	4b40      	ldr	r3, [pc, #256]	; (8001710 <main+0xd74>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	4a3d      	ldr	r2, [pc, #244]	; (800170c <main+0xd70>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	1092      	asrs	r2, r2, #2
 800161e:	17db      	asrs	r3, r3, #31
 8001620:	1ad2      	subs	r2, r2, r3
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <main+0xd74>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 8001628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162a:	4a38      	ldr	r2, [pc, #224]	; (800170c <main+0xd70>)
 800162c:	fb82 1203 	smull	r1, r2, r2, r3
 8001630:	1092      	asrs	r2, r2, #2
 8001632:	17db      	asrs	r3, r3, #31
 8001634:	1ad2      	subs	r2, r2, r3
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0xd74>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
							pulseb--;
 800163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163e:	3b01      	subs	r3, #1
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
							if(!pulseb)
 8001642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001644:	2b00      	cmp	r3, #0
 8001646:	f040 8097 	bne.w	8001778 <main+0xddc>
								couleur=vert;
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <main+0xd6c>)
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
							break;
 8001650:	e092      	b.n	8001778 <main+0xddc>
						case vert:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 8001652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001654:	4a2d      	ldr	r2, [pc, #180]	; (800170c <main+0xd70>)
 8001656:	fb82 1203 	smull	r1, r2, r2, r3
 800165a:	1092      	asrs	r2, r2, #2
 800165c:	17db      	asrs	r3, r3, #31
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <main+0xd74>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 8001666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <main+0xd70>)
 800166a:	fb82 1203 	smull	r1, r2, r2, r3
 800166e:	1092      	asrs	r2, r2, #2
 8001670:	17db      	asrs	r3, r3, #31
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <main+0xd74>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <main+0xd70>)
 800167e:	fb82 1203 	smull	r1, r2, r2, r3
 8001682:	1092      	asrs	r2, r2, #2
 8001684:	17db      	asrs	r3, r3, #31
 8001686:	1ad2      	subs	r2, r2, r3
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0xd74>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
							pulser++;
 800168e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001690:	3301      	adds	r3, #1
 8001692:	643b      	str	r3, [r7, #64]	; 0x40
							if(pulser==1000)
 8001694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169a:	d16f      	bne.n	800177c <main+0xde0>
								couleur=jaune;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <main+0xd6c>)
 800169e:	2205      	movs	r2, #5
 80016a0:	601a      	str	r2, [r3, #0]
							break;
 80016a2:	e06b      	b.n	800177c <main+0xde0>
						case jaune:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 80016a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <main+0xd70>)
 80016a8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ac:	1092      	asrs	r2, r2, #2
 80016ae:	17db      	asrs	r3, r3, #31
 80016b0:	1ad2      	subs	r2, r2, r3
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <main+0xd74>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 80016b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <main+0xd70>)
 80016bc:	fb82 1203 	smull	r1, r2, r2, r3
 80016c0:	1092      	asrs	r2, r2, #2
 80016c2:	17db      	asrs	r3, r3, #31
 80016c4:	1ad2      	subs	r2, r2, r3
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <main+0xd74>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <main+0xd70>)
 80016d0:	fb82 1203 	smull	r1, r2, r2, r3
 80016d4:	1092      	asrs	r2, r2, #2
 80016d6:	17db      	asrs	r3, r3, #31
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <main+0xd74>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
							pulseg--;
 80016e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e2:	3b01      	subs	r3, #1
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
							if(!pulseg)
 80016e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d149      	bne.n	8001780 <main+0xde4>
								couleur=rouge;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <main+0xd6c>)
 80016ee:	2203      	movs	r2, #3
 80016f0:	601a      	str	r2, [r3, #0]
							break;
 80016f2:	e045      	b.n	8001780 <main+0xde4>
 80016f4:	20000004 	.word	0x20000004
 80016f8:	20000040 	.word	0x20000040
 80016fc:	20000044 	.word	0x20000044
 8001700:	08004814 	.word	0x08004814
 8001704:	0800481c 	.word	0x0800481c
 8001708:	20000048 	.word	0x20000048
 800170c:	66666667 	.word	0x66666667
 8001710:	200000c4 	.word	0x200000c4
						case rouge:
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulser/10);
 8001714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001716:	4a98      	ldr	r2, [pc, #608]	; (8001978 <main+0xfdc>)
 8001718:	fb82 1203 	smull	r1, r2, r2, r3
 800171c:	1092      	asrs	r2, r2, #2
 800171e:	17db      	asrs	r3, r3, #31
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	4b96      	ldr	r3, [pc, #600]	; (800197c <main+0xfe0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulseg/10);
 8001728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172a:	4a93      	ldr	r2, [pc, #588]	; (8001978 <main+0xfdc>)
 800172c:	fb82 1203 	smull	r1, r2, r2, r3
 8001730:	1092      	asrs	r2, r2, #2
 8001732:	17db      	asrs	r3, r3, #31
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <main+0xfe0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulseb/10);
 800173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173e:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <main+0xfdc>)
 8001740:	fb82 1203 	smull	r1, r2, r2, r3
 8001744:	1092      	asrs	r2, r2, #2
 8001746:	17db      	asrs	r3, r3, #31
 8001748:	1ad2      	subs	r2, r2, r3
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <main+0xfe0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
							pulseg++;
 8001750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001752:	3301      	adds	r3, #1
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
							pulseb++;
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	3301      	adds	r3, #1
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
							if(pulseg==1000)
 800175c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001762:	d10f      	bne.n	8001784 <main+0xde8>
								couleur=blanc;
 8001764:	4b86      	ldr	r3, [pc, #536]	; (8001980 <main+0xfe4>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
							break;
 800176a:	e00b      	b.n	8001784 <main+0xde8>
							break;
 800176c:	bf00      	nop
 800176e:	e00a      	b.n	8001786 <main+0xdea>
							break;
 8001770:	bf00      	nop
 8001772:	e008      	b.n	8001786 <main+0xdea>
							break;
 8001774:	bf00      	nop
 8001776:	e006      	b.n	8001786 <main+0xdea>
							break;
 8001778:	bf00      	nop
 800177a:	e004      	b.n	8001786 <main+0xdea>
							break;
 800177c:	bf00      	nop
 800177e:	e002      	b.n	8001786 <main+0xdea>
							break;
 8001780:	bf00      	nop
 8001782:	e000      	b.n	8001786 <main+0xdea>
							break;
 8001784:	bf00      	nop
					}

					if(SW1==0)
 8001786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 854d 	bne.w	8002228 <main+0x188c>
					{
						initSEG();
 800178e:	f7fe fcdd 	bl	800014c <initSEG>
						HAL_Delay(DelaiNextState);
 8001792:	20fa      	movs	r0, #250	; 0xfa
 8001794:	f001 f994 	bl	8002ac0 <HAL_Delay>
						etat=green2;
 8001798:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <main+0xfe8>)
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
					}
					break;
 800179e:	f000 bd43 	b.w	8002228 <main+0x188c>
			case green2:
				compt++;
 80017a2:	4b79      	ldr	r3, [pc, #484]	; (8001988 <main+0xfec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a77      	ldr	r2, [pc, #476]	; (8001988 <main+0xfec>)
 80017aa:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 80017ac:	4b76      	ldr	r3, [pc, #472]	; (8001988 <main+0xfec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b4:	dd0a      	ble.n	80017cc <main+0xe30>
					affichageDig(duty_cycleg2, delai,GAUCHE,100,0,appel2);
 80017b6:	4b75      	ldr	r3, [pc, #468]	; (800198c <main+0xff0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	2200      	movs	r2, #0
 80017c4:	69f9      	ldr	r1, [r7, #28]
 80017c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80017c8:	f7fe fdae 	bl	8000328 <affichageDig>
				if(compt>2000)
 80017cc:	4b6e      	ldr	r3, [pc, #440]	; (8001988 <main+0xfec>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017d4:	dd02      	ble.n	80017dc <main+0xe40>
					compt=0;
 80017d6:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <main+0xfec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <main+0xfec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	da06      	bge.n	80017f4 <main+0xe58>
					affichageChar("GREE", delai,GAUCHE,appel2);
 80017e6:	4b69      	ldr	r3, [pc, #420]	; (800198c <main+0xff0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	69f9      	ldr	r1, [r7, #28]
 80017ee:	4868      	ldr	r0, [pc, #416]	; (8001990 <main+0xff4>)
 80017f0:	f7ff f83e 	bl	8000870 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	4866      	ldr	r0, [pc, #408]	; (8001994 <main+0xff8>)
 80017fa:	f001 fdf5 	bl	80033e8 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001804:	4293      	cmp	r3, r2
 8001806:	d020      	beq.n	800184a <main+0xeae>
				{
					if(lastState==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180c:	4861      	ldr	r0, [pc, #388]	; (8001994 <main+0xff8>)
 800180e:	f001 fdeb 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001818:	4293      	cmp	r3, r2
 800181a:	d109      	bne.n	8001830 <main+0xe94>
					{
						if (duty_cycleg2<=0)
 800181c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181e:	2b00      	cmp	r3, #0
 8001820:	dc02      	bgt.n	8001828 <main+0xe8c>
							duty_cycleg2=0;
 8001822:	2300      	movs	r3, #0
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001826:	e00c      	b.n	8001842 <main+0xea6>
						else
							duty_cycleg2--;
 8001828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182a:	3b01      	subs	r3, #1
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800182e:	e008      	b.n	8001842 <main+0xea6>
					}
					else
					{
						if (duty_cycleg2>=100)
 8001830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001832:	2b63      	cmp	r3, #99	; 0x63
 8001834:	dd02      	ble.n	800183c <main+0xea0>
							duty_cycleg2=100; //122
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183a:	e002      	b.n	8001842 <main+0xea6>
						else
							duty_cycleg2++;
 800183c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800183e:	3301      	adds	r3, #1
 8001840:	64fb      	str	r3, [r7, #76]	; 0x4c
					}
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <main+0xfe0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	4851      	ldr	r0, [pc, #324]	; (8001994 <main+0xff8>)
 8001850:	f001 fdca 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
				lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8001858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185c:	484d      	ldr	r0, [pc, #308]	; (8001994 <main+0xff8>)
 800185e:	f001 fdc3 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	613b      	str	r3, [r7, #16]

				if(!SW2 && !longpress2 && !shortpress2)
 8001866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001868:	2b00      	cmp	r3, #0
 800186a:	d152      	bne.n	8001912 <main+0xf76>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	2b00      	cmp	r3, #0
 8001870:	d14f      	bne.n	8001912 <main+0xf76>
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14c      	bne.n	8001912 <main+0xf76>
				{
					flag=1;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 800187c:	f001 f916 	bl	8002aac <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	607b      	str	r3, [r7, #4]
					while(SW2==0 && flag==1)
 8001884:	e03f      	b.n	8001906 <main+0xf6a>
					{
						time=HAL_GetTick();
 8001886:	f001 f911 	bl	8002aac <HAL_GetTick>
 800188a:	4603      	mov	r3, r0
 800188c:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b1e      	cmp	r3, #30
 8001896:	dd0f      	ble.n	80018b8 <main+0xf1c>
						{
							shortpress2=TRUE;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
							longpress2=FALSE;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
							if(time-sauv>1000)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018aa:	dd05      	ble.n	80018b8 <main+0xf1c>
							{
								shortpress2=FALSE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
								longpress2=TRUE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
								flag=0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80018c2:	da0c      	bge.n	80018de <main+0xf42>
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2bc8      	cmp	r3, #200	; 0xc8
 80018cc:	dd07      	ble.n	80018de <main+0xf42>
							affichageChar(" RAZ", delai,GAUCHE,appel1);
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <main+0xffc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	69f9      	ldr	r1, [r7, #28]
 80018d6:	4831      	ldr	r0, [pc, #196]	; (800199c <main+0x1000>)
 80018d8:	f7fe ffca 	bl	8000870 <affichageChar>
 80018dc:	e00c      	b.n	80018f8 <main+0xf5c>
						else
							affichageDig((time-sauv), delai,GAUCHE,100,0,appel1);
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1ad0      	subs	r0, r2, r3
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <main+0xffc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2200      	movs	r2, #0
 80018f2:	69f9      	ldr	r1, [r7, #28]
 80018f4:	f7fe fd18 	bl	8000328 <affichageDig>
						SW2=HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 80018f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0xff8>)
 80018fe:	f001 fd73 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	66bb      	str	r3, [r7, #104]	; 0x68
					while(SW2==0 && flag==1)
 8001906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <main+0xf76>
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d0b9      	beq.n	8001886 <main+0xeea>
					}
				}
				if(shortpress2 && SW2==1)
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00c      	beq.n	8001932 <main+0xf96>
 8001918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191a:	2b01      	cmp	r3, #1
 800191c:	d109      	bne.n	8001932 <main+0xf96>
				{
					HAL_Delay(DelaiNextState);
 800191e:	20fa      	movs	r0, #250	; 0xfa
 8001920:	f001 f8ce 	bl	8002ac0 <HAL_Delay>
					longpress2=FALSE;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=red2;
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <main+0x1004>)
 800192e:	2203      	movs	r2, #3
 8001930:	601a      	str	r2, [r3, #0]
				}
				if(longpress2 && SW2==1)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 847a 	beq.w	800222e <main+0x1892>
 800193a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193c:	2b01      	cmp	r3, #1
 800193e:	f040 8476 	bne.w	800222e <main+0x1892>
				{
					duty_cycleg2=0;duty_cycler2=0;duty_cycleb2=0;
 8001942:	2300      	movs	r3, #0
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001946:	2300      	movs	r3, #0
 8001948:	653b      	str	r3, [r7, #80]	; 0x50
 800194a:	2300      	movs	r3, #0
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <main+0xfe0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001954:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <main+0xfe0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycler2);
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <main+0xfe0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
					longpress2=FALSE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=green2;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <main+0x1004>)
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
				}
				break;
 8001974:	f000 bc5b 	b.w	800222e <main+0x1892>
 8001978:	66666667 	.word	0x66666667
 800197c:	200000c4 	.word	0x200000c4
 8001980:	20000048 	.word	0x20000048
 8001984:	20000000 	.word	0x20000000
 8001988:	20000040 	.word	0x20000040
 800198c:	20000004 	.word	0x20000004
 8001990:	08004824 	.word	0x08004824
 8001994:	40011000 	.word	0x40011000
 8001998:	20000044 	.word	0x20000044
 800199c:	08004844 	.word	0x08004844
 80019a0:	20000008 	.word	0x20000008
			case red2:
				compt++;
 80019a4:	4b9b      	ldr	r3, [pc, #620]	; (8001c14 <main+0x1278>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a9a      	ldr	r2, [pc, #616]	; (8001c14 <main+0x1278>)
 80019ac:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 80019ae:	4b99      	ldr	r3, [pc, #612]	; (8001c14 <main+0x1278>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b6:	dd0a      	ble.n	80019ce <main+0x1032>
					affichageDig(duty_cycler2, delai,GAUCHE,100,0,appel2);
 80019b8:	4b97      	ldr	r3, [pc, #604]	; (8001c18 <main+0x127c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2300      	movs	r3, #0
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2364      	movs	r3, #100	; 0x64
 80019c4:	2200      	movs	r2, #0
 80019c6:	69f9      	ldr	r1, [r7, #28]
 80019c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019ca:	f7fe fcad 	bl	8000328 <affichageDig>
				if(compt>2000)
 80019ce:	4b91      	ldr	r3, [pc, #580]	; (8001c14 <main+0x1278>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019d6:	dd02      	ble.n	80019de <main+0x1042>
					compt=0;
 80019d8:	4b8e      	ldr	r3, [pc, #568]	; (8001c14 <main+0x1278>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 80019de:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <main+0x1278>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e6:	da06      	bge.n	80019f6 <main+0x105a>
					affichageChar(" RED", delai,GAUCHE,appel2);
 80019e8:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <main+0x127c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	69f9      	ldr	r1, [r7, #28]
 80019f0:	488a      	ldr	r0, [pc, #552]	; (8001c1c <main+0x1280>)
 80019f2:	f7fe ff3d 	bl	8000870 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 80019f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fa:	4889      	ldr	r0, [pc, #548]	; (8001c20 <main+0x1284>)
 80019fc:	f001 fcf4 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d020      	beq.n	8001a4c <main+0x10b0>
				{
					if(lastState==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0e:	4884      	ldr	r0, [pc, #528]	; (8001c20 <main+0x1284>)
 8001a10:	f001 fcea 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d109      	bne.n	8001a32 <main+0x1096>
					{
						if (duty_cycler2<=0)
 8001a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dc02      	bgt.n	8001a2a <main+0x108e>
							duty_cycler2=0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
 8001a28:	e00c      	b.n	8001a44 <main+0x10a8>
						else
							duty_cycler2--;
 8001a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001a30:	e008      	b.n	8001a44 <main+0x10a8>
					}
					else
					{
						if (duty_cycler2>=100)
 8001a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a34:	2b63      	cmp	r3, #99	; 0x63
 8001a36:	dd02      	ble.n	8001a3e <main+0x10a2>
							duty_cycler2=100; //77
 8001a38:	2364      	movs	r3, #100	; 0x64
 8001a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8001a3c:	e002      	b.n	8001a44 <main+0x10a8>
						else
							duty_cycler2++;
 8001a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a40:	3301      	adds	r3, #1
 8001a42:	653b      	str	r3, [r7, #80]	; 0x50
					}
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycler2);
 8001a44:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <main+0x1288>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
				}
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a50:	4873      	ldr	r0, [pc, #460]	; (8001c20 <main+0x1284>)
 8001a52:	f001 fcc9 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	667b      	str	r3, [r7, #100]	; 0x64
				lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8001a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5e:	4870      	ldr	r0, [pc, #448]	; (8001c20 <main+0x1284>)
 8001a60:	f001 fcc2 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

				if(!SW2 && !longpress2 && !shortpress2)
 8001a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d152      	bne.n	8001b14 <main+0x1178>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d14f      	bne.n	8001b14 <main+0x1178>
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d14c      	bne.n	8001b14 <main+0x1178>
				{
					flag=1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8001a7e:	f001 f815 	bl	8002aac <HAL_GetTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	607b      	str	r3, [r7, #4]
					while(SW2==0 && flag==1)
 8001a86:	e03f      	b.n	8001b08 <main+0x116c>
					{
						time=HAL_GetTick();
 8001a88:	f001 f810 	bl	8002aac <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b1e      	cmp	r3, #30
 8001a98:	dd0f      	ble.n	8001aba <main+0x111e>
						{
							shortpress2=TRUE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
							longpress2=FALSE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
							if(time-sauv>1000)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aac:	dd05      	ble.n	8001aba <main+0x111e>
							{
								shortpress2=FALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
								longpress2=TRUE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
								flag=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001ac4:	da0c      	bge.n	8001ae0 <main+0x1144>
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2bc8      	cmp	r3, #200	; 0xc8
 8001ace:	dd07      	ble.n	8001ae0 <main+0x1144>
							affichageChar(" RAZ", delai,GAUCHE,appel1);
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <main+0x128c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	69f9      	ldr	r1, [r7, #28]
 8001ad8:	4854      	ldr	r0, [pc, #336]	; (8001c2c <main+0x1290>)
 8001ada:	f7fe fec9 	bl	8000870 <affichageChar>
 8001ade:	e00c      	b.n	8001afa <main+0x115e>
						else
							affichageDig((time-sauv), delai,GAUCHE,100,0,appel1);
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	1ad0      	subs	r0, r2, r3
 8001ae6:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <main+0x128c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	2200      	movs	r2, #0
 8001af4:	69f9      	ldr	r1, [r7, #28]
 8001af6:	f7fe fc17 	bl	8000328 <affichageDig>
						SW2=HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	4848      	ldr	r0, [pc, #288]	; (8001c20 <main+0x1284>)
 8001b00:	f001 fc72 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
					while(SW2==0 && flag==1)
 8001b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <main+0x1178>
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d0b9      	beq.n	8001a88 <main+0x10ec>
					}
				}
				if(shortpress2 && SW2)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <main+0x1198>
 8001b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <main+0x1198>
				{
					HAL_Delay(DelaiNextState);
 8001b20:	20fa      	movs	r0, #250	; 0xfa
 8001b22:	f000 ffcd 	bl	8002ac0 <HAL_Delay>
					longpress2=FALSE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=blue2;
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <main+0x1294>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
				}
				if(longpress2 && SW2)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 837c 	beq.w	8002234 <main+0x1898>
 8001b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8378 	beq.w	8002234 <main+0x1898>
				{
					duty_cycleg2=0;duty_cycler2=0;duty_cycleb2=0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b48:	2300      	movs	r3, #0
 8001b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <main+0x1288>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <main+0x1288>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycler2);
 8001b60:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <main+0x1288>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
					longpress2=FALSE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=red2;
 8001b70:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <main+0x1294>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	601a      	str	r2, [r3, #0]
				}
				break;
 8001b76:	e35d      	b.n	8002234 <main+0x1898>

			case blue2:
				compt++;
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <main+0x1278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <main+0x1278>)
 8001b80:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <main+0x1278>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b8a:	dd0a      	ble.n	8001ba2 <main+0x1206>
					affichageDig(duty_cycleb2, delai,GAUCHE,100,0,appel2);
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <main+0x127c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	2200      	movs	r2, #0
 8001b9a:	69f9      	ldr	r1, [r7, #28]
 8001b9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b9e:	f7fe fbc3 	bl	8000328 <affichageDig>
				if(compt>2000)
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <main+0x1278>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001baa:	dd02      	ble.n	8001bb2 <main+0x1216>
					compt=0;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <main+0x1278>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <main+0x1278>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bba:	da06      	bge.n	8001bca <main+0x122e>
					affichageChar("BLUE", delai,GAUCHE,appel2);
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <main+0x127c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	69f9      	ldr	r1, [r7, #28]
 8001bc4:	481b      	ldr	r0, [pc, #108]	; (8001c34 <main+0x1298>)
 8001bc6:	f7fe fe53 	bl	8000870 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 8001bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bce:	4814      	ldr	r0, [pc, #80]	; (8001c20 <main+0x1284>)
 8001bd0:	f001 fc0a 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d033      	beq.n	8001c46 <main+0x12aa>
				{
					if(lastState==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <main+0x1284>)
 8001be4:	f001 fc00 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d109      	bne.n	8001c06 <main+0x126a>
					{
						if (duty_cycleb2<=0)
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	dc02      	bgt.n	8001bfe <main+0x1262>
							duty_cycleb2=0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bfc:	e01f      	b.n	8001c3e <main+0x12a2>
						else
							duty_cycleb2--;
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c00:	3b01      	subs	r3, #1
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c04:	e01b      	b.n	8001c3e <main+0x12a2>
					}
					else
					{
						if (duty_cycleb2>=100)
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c08:	2b63      	cmp	r3, #99	; 0x63
 8001c0a:	dd15      	ble.n	8001c38 <main+0x129c>
							duty_cycleb2=100; //138
 8001c0c:	2364      	movs	r3, #100	; 0x64
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c10:	e015      	b.n	8001c3e <main+0x12a2>
 8001c12:	bf00      	nop
 8001c14:	20000040 	.word	0x20000040
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	08004834 	.word	0x08004834
 8001c20:	40011000 	.word	0x40011000
 8001c24:	200000c4 	.word	0x200000c4
 8001c28:	20000044 	.word	0x20000044
 8001c2c:	08004844 	.word	0x08004844
 8001c30:	20000008 	.word	0x20000008
 8001c34:	0800483c 	.word	0x0800483c
						else
							duty_cycleb2++;
 8001c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
					}
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8001c3e:	4b9a      	ldr	r3, [pc, #616]	; (8001ea8 <main+0x150c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
				}
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4898      	ldr	r0, [pc, #608]	; (8001eac <main+0x1510>)
 8001c4c:	f001 fbcc 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	667b      	str	r3, [r7, #100]	; 0x64
				lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8001c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c58:	4894      	ldr	r0, [pc, #592]	; (8001eac <main+0x1510>)
 8001c5a:	f001 fbc5 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

				if(!SW2 && !longpress2 && !shortpress2)
 8001c62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d152      	bne.n	8001d0e <main+0x1372>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d14f      	bne.n	8001d0e <main+0x1372>
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d14c      	bne.n	8001d0e <main+0x1372>
				{
					flag=1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8001c78:	f000 ff18 	bl	8002aac <HAL_GetTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	607b      	str	r3, [r7, #4]
					while(!SW2 && flag)
 8001c80:	e03f      	b.n	8001d02 <main+0x1366>
					{
						time=HAL_GetTick();
 8001c82:	f000 ff13 	bl	8002aac <HAL_GetTick>
 8001c86:	4603      	mov	r3, r0
 8001c88:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b1e      	cmp	r3, #30
 8001c92:	dd0f      	ble.n	8001cb4 <main+0x1318>
						{
							shortpress2=TRUE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
							longpress2=FALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
							if(time-sauv>1000)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca6:	dd05      	ble.n	8001cb4 <main+0x1318>
							{
								shortpress2=FALSE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
								longpress2=TRUE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
								flag=0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001cbe:	da0c      	bge.n	8001cda <main+0x133e>
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2bc8      	cmp	r3, #200	; 0xc8
 8001cc8:	dd07      	ble.n	8001cda <main+0x133e>
							affichageChar(" RAZ", delai,GAUCHE,appel1);
 8001cca:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <main+0x1514>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	69f9      	ldr	r1, [r7, #28]
 8001cd2:	4878      	ldr	r0, [pc, #480]	; (8001eb4 <main+0x1518>)
 8001cd4:	f7fe fdcc 	bl	8000870 <affichageChar>
 8001cd8:	e00c      	b.n	8001cf4 <main+0x1358>
						else
							affichageDig((time-sauv), delai,GAUCHE,100,0,appel1);
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad0      	subs	r0, r2, r3
 8001ce0:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <main+0x1514>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2364      	movs	r3, #100	; 0x64
 8001cec:	2200      	movs	r2, #0
 8001cee:	69f9      	ldr	r1, [r7, #28]
 8001cf0:	f7fe fb1a 	bl	8000328 <affichageDig>
						SW2=HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8001cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf8:	486c      	ldr	r0, [pc, #432]	; (8001eac <main+0x1510>)
 8001cfa:	f001 fb75 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	66bb      	str	r3, [r7, #104]	; 0x68
					while(!SW2 && flag)
 8001d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <main+0x1372>
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1b9      	bne.n	8001c82 <main+0x12e6>
					}
				}
				if(shortpress2 && SW2)
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <main+0x1392>
 8001d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <main+0x1392>
				{
					HAL_Delay(DelaiNextState);
 8001d1a:	20fa      	movs	r0, #250	; 0xfa
 8001d1c:	f000 fed0 	bl	8002ac0 <HAL_Delay>
					longpress2=FALSE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=alpha;
 8001d28:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <main+0x151c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
				}
				if(longpress2 && SW2)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8282 	beq.w	800223a <main+0x189e>
 8001d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 827e 	beq.w	800223a <main+0x189e>
				{
					duty_cycleg2=0;duty_cycler2=0;duty_cycleb2=0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d42:	2300      	movs	r3, #0
 8001d44:	653b      	str	r3, [r7, #80]	; 0x50
 8001d46:	2300      	movs	r3, #0
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);
 8001d4a:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <main+0x150c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d50:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8001d52:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <main+0x150c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycler2);
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <main+0x150c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
					longpress2=FALSE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=blue2;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <main+0x151c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
				}
				break;
 8001d70:	e263      	b.n	800223a <main+0x189e>
			case alpha:
				compt++;
 8001d72:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <main+0x1520>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a50      	ldr	r2, [pc, #320]	; (8001ebc <main+0x1520>)
 8001d7a:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <main+0x1520>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d84:	dd0c      	ble.n	8001da0 <main+0x1404>
					affichageDig(alphaa,delai,GAUCHE,1000,1,appel2);
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <main+0x1524>)
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <main+0x1528>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d98:	2200      	movs	r2, #0
 8001d9a:	69f9      	ldr	r1, [r7, #28]
 8001d9c:	f7fe fac4 	bl	8000328 <affichageDig>
				if(compt>2000)
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <main+0x1520>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001da8:	dd02      	ble.n	8001db0 <main+0x1414>
					compt=0;
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <main+0x1520>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <main+0x1520>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db8:	da06      	bge.n	8001dc8 <main+0x142c>
					affichageChar("DUTY", delai,GAUCHE,appel2);
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <main+0x1528>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	69f9      	ldr	r1, [r7, #28]
 8001dc2:	4841      	ldr	r0, [pc, #260]	; (8001ec8 <main+0x152c>)
 8001dc4:	f7fe fd54 	bl	8000870 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 8001dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dcc:	4837      	ldr	r0, [pc, #220]	; (8001eac <main+0x1510>)
 8001dce:	f001 fb0b 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d024      	beq.n	8001e26 <main+0x148a>
				{
					if(lastState==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de0:	4832      	ldr	r0, [pc, #200]	; (8001eac <main+0x1510>)
 8001de2:	f001 fb01 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10d      	bne.n	8001e0c <main+0x1470>
					{
						if (alphaa<=0)
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <main+0x1524>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dc03      	bgt.n	8001e00 <main+0x1464>
							alphaa=0;
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <main+0x1524>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e012      	b.n	8001e26 <main+0x148a>
						else
							alphaa--;
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x1524>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <main+0x1524>)
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00c      	b.n	8001e26 <main+0x148a>
					}
					else
					{
						if (alphaa>=100)
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <main+0x1524>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b63      	cmp	r3, #99	; 0x63
 8001e12:	dd03      	ble.n	8001e1c <main+0x1480>
							alphaa=100;
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <main+0x1524>)
 8001e16:	2264      	movs	r2, #100	; 0x64
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e004      	b.n	8001e26 <main+0x148a>
						else
							alphaa++;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <main+0x1524>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <main+0x1524>)
 8001e24:	6013      	str	r3, [r2, #0]
					}
				}
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2a:	4820      	ldr	r0, [pc, #128]	; (8001eac <main+0x1510>)
 8001e2c:	f001 fadc 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
				lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8001e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e38:	481c      	ldr	r0, [pc, #112]	; (8001eac <main+0x1510>)
 8001e3a:	f001 fad5 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

				comptsw++;
 8001e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e44:	3301      	adds	r3, #1
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
				if(comptsw>5*alphaa)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <main+0x1524>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dd04      	ble.n	8001e62 <main+0x14c6>
					HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2138      	movs	r1, #56	; 0x38
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <main+0x1510>)
 8001e5e:	f001 fada 	bl	8003416 <HAL_GPIO_WritePin>
				if(comptsw>=500)
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e68:	db01      	blt.n	8001e6e <main+0x14d2>
					comptsw=0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
				if(comptsw<5*alphaa)
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <main+0x1524>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	da04      	bge.n	8001e88 <main+0x14ec>
					HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2138      	movs	r1, #56	; 0x38
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <main+0x1510>)
 8001e84:	f001 fac7 	bl	8003416 <HAL_GPIO_WritePin>

				if(!SW2 && !longpress2 && !shortpress2)
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d164      	bne.n	8001f58 <main+0x15bc>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d161      	bne.n	8001f58 <main+0x15bc>
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d15e      	bne.n	8001f58 <main+0x15bc>
				{
					flag=1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8001e9e:	f000 fe05 	bl	8002aac <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	607b      	str	r3, [r7, #4]
					while(SW2==0 && flag==1)
 8001ea6:	e051      	b.n	8001f4c <main+0x15b0>
 8001ea8:	200000c4 	.word	0x200000c4
 8001eac:	40011000 	.word	0x40011000
 8001eb0:	20000044 	.word	0x20000044
 8001eb4:	08004844 	.word	0x08004844
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000040 	.word	0x20000040
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	0800484c 	.word	0x0800484c
					{
						time=HAL_GetTick();
 8001ecc:	f000 fdee 	bl	8002aac <HAL_GetTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b1e      	cmp	r3, #30
 8001edc:	dd0f      	ble.n	8001efe <main+0x1562>
						{
							shortpress2=TRUE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
							longpress2=FALSE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
							if(time-sauv>1000)
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef0:	dd05      	ble.n	8001efe <main+0x1562>
							{
								shortpress2=FALSE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
								longpress2=TRUE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
								flag=0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f08:	da0c      	bge.n	8001f24 <main+0x1588>
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2bc8      	cmp	r3, #200	; 0xc8
 8001f12:	dd07      	ble.n	8001f24 <main+0x1588>
							affichageChar(" RAZ", delai,GAUCHE,appel1);
 8001f14:	4b95      	ldr	r3, [pc, #596]	; (800216c <main+0x17d0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	4894      	ldr	r0, [pc, #592]	; (8002170 <main+0x17d4>)
 8001f1e:	f7fe fca7 	bl	8000870 <affichageChar>
 8001f22:	e00c      	b.n	8001f3e <main+0x15a2>
						else
							affichageDig((time-sauv), delai,GAUCHE,100,0,appel1);
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1ad0      	subs	r0, r2, r3
 8001f2a:	4b90      	ldr	r3, [pc, #576]	; (800216c <main+0x17d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2300      	movs	r3, #0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2364      	movs	r3, #100	; 0x64
 8001f36:	2200      	movs	r2, #0
 8001f38:	69f9      	ldr	r1, [r7, #28]
 8001f3a:	f7fe f9f5 	bl	8000328 <affichageDig>
						SW2=HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8001f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f42:	488c      	ldr	r0, [pc, #560]	; (8002174 <main+0x17d8>)
 8001f44:	f001 fa50 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
					while(SW2==0 && flag==1)
 8001f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <main+0x15bc>
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d0b9      	beq.n	8001ecc <main+0x1530>
					}
				}
				if(shortpress2 && SW2==1)
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <main+0x15dc>
 8001f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d109      	bne.n	8001f78 <main+0x15dc>
				{
					HAL_Delay(DelaiNextState);
 8001f64:	20fa      	movs	r0, #250	; 0xfa
 8001f66:	f000 fdab 	bl	8002ac0 <HAL_Delay>
					longpress2=FALSE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=freq;
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <main+0x17dc>)
 8001f74:	2204      	movs	r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
				}
				if(longpress2 && SW2==1)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8160 	beq.w	8002240 <main+0x18a4>
 8001f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 815c 	bne.w	8002240 <main+0x18a4>
				{
					alphaa=0;
 8001f88:	4b7c      	ldr	r3, [pc, #496]	; (800217c <main+0x17e0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
					longpress2=FALSE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=alpha;
 8001f96:	4b78      	ldr	r3, [pc, #480]	; (8002178 <main+0x17dc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
				}
				break;
 8001f9c:	e150      	b.n	8002240 <main+0x18a4>
			case freq:
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa2:	4874      	ldr	r0, [pc, #464]	; (8002174 <main+0x17d8>)
 8001fa4:	f001 fa20 	bl	80033e8 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	667b      	str	r3, [r7, #100]	; 0x64
				compt++;
 8001fac:	4b74      	ldr	r3, [pc, #464]	; (8002180 <main+0x17e4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a73      	ldr	r2, [pc, #460]	; (8002180 <main+0x17e4>)
 8001fb4:	6013      	str	r3, [r2, #0]
				if(compt>1000)
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <main+0x17e4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fbe:	dd17      	ble.n	8001ff0 <main+0x1654>
				{
					if (frequency>1000)
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc6:	dd07      	ble.n	8001fd8 <main+0x163c>
						affichageChar(" 10k", delai, GAUCHE,appel2);
 8001fc8:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <main+0x17e8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	69f9      	ldr	r1, [r7, #28]
 8001fd0:	486d      	ldr	r0, [pc, #436]	; (8002188 <main+0x17ec>)
 8001fd2:	f7fe fc4d 	bl	8000870 <affichageChar>
 8001fd6:	e00b      	b.n	8001ff0 <main+0x1654>
					else
						affichageDig(frequency,delai,GAUCHE,1000,1,appel2);
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <main+0x17e8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	69f9      	ldr	r1, [r7, #28]
 8001fea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001fec:	f7fe f99c 	bl	8000328 <affichageDig>
				}
				if(compt>2000)
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <main+0x17e4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ff8:	dd02      	ble.n	8002000 <main+0x1664>
					compt=0;
 8001ffa:	4b61      	ldr	r3, [pc, #388]	; (8002180 <main+0x17e4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
				if(compt<1000)
 8002000:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <main+0x17e4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002008:	da06      	bge.n	8002018 <main+0x167c>
					affichageChar("FREQ", delai,GAUCHE,appel2);
 800200a:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <main+0x17e8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	69f9      	ldr	r1, [r7, #28]
 8002012:	485e      	ldr	r0, [pc, #376]	; (800218c <main+0x17f0>)
 8002014:	f7fe fc2c 	bl	8000870 <affichageChar>
				//Rotary Switch for frequency
				comptsw++;
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	3301      	adds	r3, #1
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
				if(comptsw>10*alphaa/frequency)
 800201e:	4b57      	ldr	r3, [pc, #348]	; (800217c <main+0x17e0>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	461a      	mov	r2, r3
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002034:	429a      	cmp	r2, r3
 8002036:	dd04      	ble.n	8002042 <main+0x16a6>
					HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2138      	movs	r1, #56	; 0x38
 800203c:	484d      	ldr	r0, [pc, #308]	; (8002174 <main+0x17d8>)
 800203e:	f001 f9ea 	bl	8003416 <HAL_GPIO_WritePin>
				if(comptsw>=1000/frequency)
 8002042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002048:	fb92 f3f3 	sdiv	r3, r2, r3
 800204c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204e:	429a      	cmp	r2, r3
 8002050:	db01      	blt.n	8002056 <main+0x16ba>
					comptsw=0;
 8002052:	2300      	movs	r3, #0
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
				if(comptsw<10*alphaa/frequency)
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <main+0x17e0>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002066:	fb92 f3f3 	sdiv	r3, r2, r3
 800206a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800206c:	429a      	cmp	r2, r3
 800206e:	da04      	bge.n	800207a <main+0x16de>
					HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2138      	movs	r1, #56	; 0x38
 8002074:	483f      	ldr	r0, [pc, #252]	; (8002174 <main+0x17d8>)
 8002076:	f001 f9ce 	bl	8003416 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 800207a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207e:	483d      	ldr	r0, [pc, #244]	; (8002174 <main+0x17d8>)
 8002080:	f001 f9b2 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208a:	4293      	cmp	r3, r2
 800208c:	d031      	beq.n	80020f2 <main+0x1756>
				{
					if(lastState==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 800208e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002092:	4838      	ldr	r0, [pc, #224]	; (8002174 <main+0x17d8>)
 8002094:	f001 f9a8 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10d      	bne.n	80020be <main+0x1722>
					{
							frequency/=10;
 80020a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a4:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <main+0x17f4>)
 80020a6:	fb82 1203 	smull	r1, r2, r2, r3
 80020aa:	1092      	asrs	r2, r2, #2
 80020ac:	17db      	asrs	r3, r3, #31
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
							if (frequency<=1)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	dc0e      	bgt.n	80020d6 <main+0x173a>
								frequency=1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
 80020bc:	e00b      	b.n	80020d6 <main+0x173a>
							__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);*/
					}
					else
					{
							frequency*=10;
 80020be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, compare);
							compare=duty_cycler2*autoreload/100;
							__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);*/

							if (frequency>100)
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	dd02      	ble.n	80020d6 <main+0x173a>
								frequency=1000;
 80020d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d4:	647b      	str	r3, [r7, #68]	; 0x44

					}
					lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 80020d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020da:	4826      	ldr	r0, [pc, #152]	; (8002174 <main+0x17d8>)
 80020dc:	f001 f984 	bl	80033e8 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
					lastBstate2=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 80020e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020e8:	4822      	ldr	r0, [pc, #136]	; (8002174 <main+0x17d8>)
 80020ea:	f001 f97d 	bl	80033e8 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]
				}
				if(!SW2 && !longpress2 && !shortpress2)
 80020f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d167      	bne.n	80021c8 <main+0x182c>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d164      	bne.n	80021c8 <main+0x182c>
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d161      	bne.n	80021c8 <main+0x182c>
				{
					flag=1;
 8002104:	2301      	movs	r3, #1
 8002106:	623b      	str	r3, [r7, #32]
					sauv=HAL_GetTick();
 8002108:	f000 fcd0 	bl	8002aac <HAL_GetTick>
 800210c:	4603      	mov	r3, r0
 800210e:	607b      	str	r3, [r7, #4]
					while(SW2==0 && flag==1)
 8002110:	e054      	b.n	80021bc <main+0x1820>
					{
						time=HAL_GetTick();
 8002112:	f000 fccb 	bl	8002aac <HAL_GetTick>
 8002116:	4603      	mov	r3, r0
 8002118:	603b      	str	r3, [r7, #0]
						if(time-sauv>30)
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b1e      	cmp	r3, #30
 8002122:	dd0f      	ble.n	8002144 <main+0x17a8>
						{
							shortpress2=TRUE;
 8002124:	2301      	movs	r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
							longpress2=FALSE;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
							if(time-sauv>1000)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002136:	dd05      	ble.n	8002144 <main+0x17a8>
							{
								shortpress2=FALSE;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
								longpress2=TRUE;
 800213c:	2301      	movs	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
								flag=0;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
							}
						}
						if((time-sauv)<600 && (time-sauv)>200)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800214e:	da21      	bge.n	8002194 <main+0x17f8>
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2bc8      	cmp	r3, #200	; 0xc8
 8002158:	dd1c      	ble.n	8002194 <main+0x17f8>
							affichageChar(" RAZ", delai,GAUCHE,appel1);
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <main+0x17d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	69f9      	ldr	r1, [r7, #28]
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <main+0x17d4>)
 8002164:	f7fe fb84 	bl	8000870 <affichageChar>
 8002168:	e021      	b.n	80021ae <main+0x1812>
 800216a:	bf00      	nop
 800216c:	20000044 	.word	0x20000044
 8002170:	08004844 	.word	0x08004844
 8002174:	40011000 	.word	0x40011000
 8002178:	20000008 	.word	0x20000008
 800217c:	2000000c 	.word	0x2000000c
 8002180:	20000040 	.word	0x20000040
 8002184:	20000004 	.word	0x20000004
 8002188:	08004854 	.word	0x08004854
 800218c:	0800485c 	.word	0x0800485c
 8002190:	66666667 	.word	0x66666667
						else
							affichageDig((time-sauv), delai,GAUCHE,100,0,appel1);
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1ad0      	subs	r0, r2, r3
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <main+0x18b0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	2200      	movs	r2, #0
 80021a8:	69f9      	ldr	r1, [r7, #28]
 80021aa:	f7fe f8bd 	bl	8000328 <affichageDig>
						SW2=HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 80021ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b2:	4827      	ldr	r0, [pc, #156]	; (8002250 <main+0x18b4>)
 80021b4:	f001 f918 	bl	80033e8 <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
					while(SW2==0 && flag==1)
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <main+0x182c>
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d0a4      	beq.n	8002112 <main+0x1776>
					}
				}
				if(shortpress2 && SW2==1)
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <main+0x184c>
 80021ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d109      	bne.n	80021e8 <main+0x184c>
				{
					HAL_Delay(DelaiNextState);
 80021d4:	20fa      	movs	r0, #250	; 0xfa
 80021d6:	f000 fc73 	bl	8002ac0 <HAL_Delay>
					longpress2=FALSE;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 80021de:	2300      	movs	r3, #0
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=green2;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <main+0x18b8>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
				}
				if(longpress2 && SW2==1)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02b      	beq.n	8002246 <main+0x18aa>
 80021ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d128      	bne.n	8002246 <main+0x18aa>
				{
					duty_cycleg2=0;duty_cycler2=0;duty_cycleb2=0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f8:	2300      	movs	r3, #0
 80021fa:	653b      	str	r3, [r7, #80]	; 0x50
 80021fc:	2300      	movs	r3, #0
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycleg2);
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <main+0x18bc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb2);
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <main+0x18bc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycler2);
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <main+0x18bc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
					longpress2=FALSE;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
					shortpress2=FALSE;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
					etat2=freq;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <main+0x18b8>)
 8002222:	2204      	movs	r2, #4
 8002224:	601a      	str	r2, [r3, #0]
				}
			break;
 8002226:	e00e      	b.n	8002246 <main+0x18aa>
					break;
 8002228:	bf00      	nop
 800222a:	f7fe bc52 	b.w	8000ad2 <main+0x136>
				break;
 800222e:	bf00      	nop
 8002230:	f7fe bc4f 	b.w	8000ad2 <main+0x136>
				break;
 8002234:	bf00      	nop
 8002236:	f7fe bc4c 	b.w	8000ad2 <main+0x136>
				break;
 800223a:	bf00      	nop
 800223c:	f7fe bc49 	b.w	8000ad2 <main+0x136>
				break;
 8002240:	bf00      	nop
 8002242:	f7fe bc46 	b.w	8000ad2 <main+0x136>
			break;
 8002246:	bf00      	nop
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8002248:	f7fe bc43 	b.w	8000ad2 <main+0x136>
 800224c:	20000044 	.word	0x20000044
 8002250:	40011000 	.word	0x40011000
 8002254:	20000008 	.word	0x20000008
 8002258:	200000c4 	.word	0x200000c4

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	; 0x50
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	2228      	movs	r2, #40	; 0x28
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fabe 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002290:	2301      	movs	r3, #1
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002294:	2310      	movs	r3, #16
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002298:	2302      	movs	r3, #2
 800229a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80022a0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80022a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f8cc 	bl	8003448 <HAL_RCC_OscConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022b6:	f000 fa41 	bl	800273c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ba:	230f      	movs	r3, #15
 80022bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022be:	2302      	movs	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fb36 	bl	8003948 <HAL_RCC_ClockConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80022e2:	f000 fa2b 	bl	800273c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022e6:	2302      	movs	r3, #2
 80022e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80022ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 fc90 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022fe:	f000 fa1d 	bl	800273c <Error_Handler>
  }
}
 8002302:	bf00      	nop
 8002304:	3750      	adds	r7, #80	; 0x50
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_ADC1_Init+0x74>)
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <MX_ADC1_Init+0x78>)
 8002320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_ADC1_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_ADC1_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_ADC1_Init+0x74>)
 8002330:	2200      	movs	r2, #0
 8002332:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_ADC1_Init+0x74>)
 8002336:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800233a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_ADC1_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_ADC1_Init+0x74>)
 8002344:	2201      	movs	r2, #1
 8002346:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_ADC1_Init+0x74>)
 800234a:	f000 fbdd 	bl	8002b08 <HAL_ADC_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002354:	f000 f9f2 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002358:	2304      	movs	r3, #4
 800235a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800235c:	2301      	movs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_ADC1_Init+0x74>)
 800236a:	f000 fca5 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002374:	f000 f9e2 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000094 	.word	0x20000094
 8002384:	40012400 	.word	0x40012400

08002388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	f107 0320 	add.w	r3, r7, #32
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <MX_TIM2_Init+0x114>)
 80023ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400;
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <MX_TIM2_Init+0x114>)
 80023c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <MX_TIM2_Init+0x114>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <MX_TIM2_Init+0x114>)
 80023d0:	2264      	movs	r2, #100	; 0x64
 80023d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <MX_TIM2_Init+0x114>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <MX_TIM2_Init+0x114>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e0:	482e      	ldr	r0, [pc, #184]	; (800249c <MX_TIM2_Init+0x114>)
 80023e2:	f001 fccf 	bl	8003d84 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023ec:	f000 f9a6 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4827      	ldr	r0, [pc, #156]	; (800249c <MX_TIM2_Init+0x114>)
 80023fe:	f001 feb5 	bl	800416c <HAL_TIM_ConfigClockSource>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002408:	f000 f998 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800240c:	4823      	ldr	r0, [pc, #140]	; (800249c <MX_TIM2_Init+0x114>)
 800240e:	f001 fd08 	bl	8003e22 <HAL_TIM_PWM_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002418:	f000 f990 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	4619      	mov	r1, r3
 800242a:	481c      	ldr	r0, [pc, #112]	; (800249c <MX_TIM2_Init+0x114>)
 800242c:	f002 f962 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002436:	f000 f981 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	; 0x60
 800243c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2204      	movs	r2, #4
 800244e:	4619      	mov	r1, r3
 8002450:	4812      	ldr	r0, [pc, #72]	; (800249c <MX_TIM2_Init+0x114>)
 8002452:	f001 fdcd 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800245c:	f000 f96e 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2208      	movs	r2, #8
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_TIM2_Init+0x114>)
 8002468:	f001 fdc2 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002472:	f000 f963 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	220c      	movs	r2, #12
 800247a:	4619      	mov	r1, r3
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <MX_TIM2_Init+0x114>)
 800247e:	f001 fdb7 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002488:	f000 f958 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <MX_TIM2_Init+0x114>)
 800248e:	f000 f9f9 	bl	8002884 <HAL_TIM_MspPostInit>

}
 8002492:	bf00      	nop
 8002494:	3738      	adds	r7, #56	; 0x38
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200000c4 	.word	0x200000c4

080024a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
 80024cc:	615a      	str	r2, [r3, #20]
 80024ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024d2:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <MX_TIM3_Init+0x114>)
 80024d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024d8:	2201      	movs	r2, #1
 80024da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 600;
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024f6:	482e      	ldr	r0, [pc, #184]	; (80025b0 <MX_TIM3_Init+0x110>)
 80024f8:	f001 fc44 	bl	8003d84 <HAL_TIM_Base_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002502:	f000 f91b 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800250c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002510:	4619      	mov	r1, r3
 8002512:	4827      	ldr	r0, [pc, #156]	; (80025b0 <MX_TIM3_Init+0x110>)
 8002514:	f001 fe2a 	bl	800416c <HAL_TIM_ConfigClockSource>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800251e:	f000 f90d 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002522:	4823      	ldr	r0, [pc, #140]	; (80025b0 <MX_TIM3_Init+0x110>)
 8002524:	f001 fc7d 	bl	8003e22 <HAL_TIM_PWM_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800252e:	f000 f905 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800253a:	f107 0320 	add.w	r3, r7, #32
 800253e:	4619      	mov	r1, r3
 8002540:	481b      	ldr	r0, [pc, #108]	; (80025b0 <MX_TIM3_Init+0x110>)
 8002542:	f002 f8d7 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800254c:	f000 f8f6 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	4619      	mov	r1, r3
 8002566:	4812      	ldr	r0, [pc, #72]	; (80025b0 <MX_TIM3_Init+0x110>)
 8002568:	f001 fd42 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002572:	f000 f8e3 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2204      	movs	r2, #4
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM3_Init+0x110>)
 800257e:	f001 fd37 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002588:	f000 f8d8 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	2208      	movs	r2, #8
 8002590:	4619      	mov	r1, r3
 8002592:	4807      	ldr	r0, [pc, #28]	; (80025b0 <MX_TIM3_Init+0x110>)
 8002594:	f001 fd2c 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800259e:	f000 f8cd 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <MX_TIM3_Init+0x110>)
 80025a4:	f000 f96e 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80025a8:	bf00      	nop
 80025aa:	3738      	adds	r7, #56	; 0x38
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000004c 	.word	0x2000004c
 80025b4:	40000400 	.word	0x40000400

080025b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <MX_GPIO_Init+0x170>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a55      	ldr	r2, [pc, #340]	; (8002728 <MX_GPIO_Init+0x170>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <MX_GPIO_Init+0x170>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <MX_GPIO_Init+0x170>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a4f      	ldr	r2, [pc, #316]	; (8002728 <MX_GPIO_Init+0x170>)
 80025ea:	f043 0320 	orr.w	r3, r3, #32
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <MX_GPIO_Init+0x170>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <MX_GPIO_Init+0x170>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a49      	ldr	r2, [pc, #292]	; (8002728 <MX_GPIO_Init+0x170>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <MX_GPIO_Init+0x170>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <MX_GPIO_Init+0x170>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <MX_GPIO_Init+0x170>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <MX_GPIO_Init+0x170>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin|SEG_B_Pin
 800262c:	2201      	movs	r2, #1
 800262e:	f641 4138 	movw	r1, #7224	; 0x1c38
 8002632:	483e      	ldr	r0, [pc, #248]	; (800272c <MX_GPIO_Init+0x174>)
 8002634:	f000 feef 	bl	8003416 <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_D_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 8002638:	2201      	movs	r2, #1
 800263a:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 800263e:	483c      	ldr	r0, [pc, #240]	; (8002730 <MX_GPIO_Init+0x178>)
 8002640:	f000 fee9 	bl	8003416 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800264a:	483a      	ldr	r0, [pc, #232]	; (8002734 <MX_GPIO_Init+0x17c>)
 800264c:	f000 fee3 	bl	8003416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	2104      	movs	r1, #4
 8002654:	4838      	ldr	r0, [pc, #224]	; (8002738 <MX_GPIO_Init+0x180>)
 8002656:	f000 fede 	bl	8003416 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROT_A_2_Pin ROT_B_2_Pin ROT_SW_2_Pin */
  GPIO_InitStruct.Pin = ROT_A_2_Pin|ROT_B_2_Pin|ROT_SW_2_Pin;
 800265a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	4619      	mov	r1, r3
 800266e:	482f      	ldr	r0, [pc, #188]	; (800272c <MX_GPIO_Init+0x174>)
 8002670:	f000 fd40 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_Pin PC4_Pin PC5_Pin */
  GPIO_InitStruct.Pin = PC3_Pin|PC4_Pin|PC5_Pin;
 8002674:	2338      	movs	r3, #56	; 0x38
 8002676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002678:	2301      	movs	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2302      	movs	r3, #2
 8002682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4828      	ldr	r0, [pc, #160]	; (800272c <MX_GPIO_Init+0x174>)
 800268c:	f000 fd32 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_1_Pin ROT_B_1_Pin ROT_A_1_Pin */
  GPIO_InitStruct.Pin = ROT_SW_1_Pin|ROT_B_1_Pin|ROT_A_1_Pin;
 8002690:	2307      	movs	r3, #7
 8002692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002698:	2301      	movs	r3, #1
 800269a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4823      	ldr	r0, [pc, #140]	; (8002730 <MX_GPIO_Init+0x178>)
 80026a4:	f000 fd26 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT8_Pin DIGIT7_Pin DIGIT6_Pin DIGIT5_Pin
                           SEG_F_Pin SEG_G_Pin SEG_DP_Pin DIGIT4_Pin
                           DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 80026a8:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 80026ac:	613b      	str	r3, [r7, #16]
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	481b      	ldr	r0, [pc, #108]	; (8002730 <MX_GPIO_Init+0x178>)
 80026c2:	f000 fd17 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin;
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2302      	movs	r3, #2
 80026d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_A_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4815      	ldr	r0, [pc, #84]	; (8002734 <MX_GPIO_Init+0x17c>)
 80026e0:	f000 fd08 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_Pin SEG_C_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 80026e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4619      	mov	r1, r3
 80026fc:	480b      	ldr	r0, [pc, #44]	; (800272c <MX_GPIO_Init+0x174>)
 80026fe:	f000 fcf9 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_E_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 8002702:	2304      	movs	r3, #4
 8002704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2302      	movs	r3, #2
 8002710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4619      	mov	r1, r3
 8002718:	4807      	ldr	r0, [pc, #28]	; (8002738 <MX_GPIO_Init+0x180>)
 800271a:	f000 fceb 	bl	80030f4 <HAL_GPIO_Init>

}
 800271e:	bf00      	nop
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40011000 	.word	0x40011000
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40010800 	.word	0x40010800
 8002738:	40011400 	.word	0x40011400

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002744:	e7fe      	b.n	8002744 <Error_Handler+0x8>
	...

08002748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_MspInit+0x5c>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_MspInit+0x5c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_MspInit+0x5c>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_MspInit+0x5c>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_MspInit+0x5c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_MspInit+0x60>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_MspInit+0x60>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000

080027ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_ADC_MspInit+0x6c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d121      	bne.n	8002810 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_ADC_MspInit+0x70>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027fc:	2310      	movs	r3, #16
 80027fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002800:	2303      	movs	r3, #3
 8002802:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4619      	mov	r1, r3
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_ADC_MspInit+0x74>)
 800280c:	f000 fc72 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40012400 	.word	0x40012400
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800

08002824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d10c      	bne.n	8002850 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800284e:	e010      	b.n	8002872 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_TIM_Base_MspInit+0x5c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10b      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_TIM_Base_MspInit+0x58>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000
 8002880:	40000400 	.word	0x40000400

08002884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d118      	bne.n	80028d6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028bc:	230e      	movs	r3, #14
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	481d      	ldr	r0, [pc, #116]	; (8002944 <HAL_TIM_MspPostInit+0xc0>)
 80028d0:	f000 fc10 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028d4:	e02f      	b.n	8002936 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_TIM_MspPostInit+0xc4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d12a      	bne.n	8002936 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80028f8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2302      	movs	r3, #2
 8002904:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	480f      	ldr	r0, [pc, #60]	; (800294c <HAL_TIM_MspPostInit+0xc8>)
 800290e:	f000 fbf1 	bl	80030f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_TIM_MspPostInit+0xcc>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_TIM_MspPostInit+0xcc>)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	6053      	str	r3, [r2, #4]
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40010800 	.word	0x40010800
 8002948:	40000400 	.word	0x40000400
 800294c:	40011000 	.word	0x40011000
 8002950:	40010000 	.word	0x40010000

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <NMI_Handler+0x4>

0800295a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <HardFault_Handler+0x4>

08002960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <MemManage_Handler+0x4>

08002966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <UsageFault_Handler+0x4>

08002972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299a:	f000 f875 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
	...

080029b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029b2:	490d      	ldr	r1, [pc, #52]	; (80029e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b8:	e002      	b.n	80029c0 <LoopCopyDataInit>

080029ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029be:	3304      	adds	r3, #4

080029c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c4:	d3f9      	bcc.n	80029ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029c8:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029cc:	e001      	b.n	80029d2 <LoopFillZerobss>

080029ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d0:	3204      	adds	r2, #4

080029d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d4:	d3fb      	bcc.n	80029ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029d6:	f7ff ffe4 	bl	80029a2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029da:	f001 fee3 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029de:	f7fd ffdd 	bl	800099c <main>
  bx lr
 80029e2:	4770      	bx	lr
   ldr r0, =_sdata
 80029e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80029ec:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 80029f0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80029f4:	20000110 	.word	0x20000110

080029f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029f8:	e7fe      	b.n	80029f8 <ADC1_IRQHandler>
	...

080029fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_Init+0x28>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_Init+0x28>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 fb3d 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a12:	200f      	movs	r0, #15
 8002a14:	f000 f808 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a18:	f7ff fe96 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40022000 	.word	0x40022000

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fb47 	bl	80030da <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 fb1d 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	20000018 	.word	0x20000018
 8002a84:	20000014 	.word	0x20000014

08002a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_IncTick+0x1c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	20000018 	.word	0x20000018
 8002aa8:	2000010c 	.word	0x2000010c

08002aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <HAL_GetTick+0x10>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	2000010c 	.word	0x2000010c

08002ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d005      	beq.n	8002ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_Delay+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae6:	bf00      	nop
 8002ae8:	f7ff ffe0 	bl	8002aac <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d8f7      	bhi.n	8002ae8 <HAL_Delay+0x28>
  {
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000018 	.word	0x20000018

08002b08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0be      	b.n	8002ca8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fe30 	bl	80027ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f9ab 	bl	8002ea8 <ADC_ConversionStop_Disable>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 8099 	bne.w	8002c96 <HAL_ADC_Init+0x18e>
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8095 	bne.w	8002c96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b74:	f023 0302 	bic.w	r3, r3, #2
 8002b78:	f043 0202 	orr.w	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7b1b      	ldrb	r3, [r3, #12]
 8002b8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	d003      	beq.n	8002baa <HAL_ADC_Init+0xa2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_ADC_Init+0xa8>
 8002baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_Init+0xaa>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7d1b      	ldrb	r3, [r3, #20]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d119      	bne.n	8002bf4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7b1b      	ldrb	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	035a      	lsls	r2, r3, #13
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e00b      	b.n	8002bf4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_ADC_Init+0x1a8>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d003      	beq.n	8002c2e <HAL_ADC_Init+0x126>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d104      	bne.n	8002c38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	051b      	lsls	r3, r3, #20
 8002c36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_ADC_Init+0x1ac>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10b      	bne.n	8002c74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c72:	e018      	b.n	8002ca6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f023 0312 	bic.w	r3, r3, #18
 8002c7c:	f043 0210 	orr.w	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c94:	e007      	b.n	8002ca6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	ffe1f7fd 	.word	0xffe1f7fd
 8002cb4:	ff1f0efe 	.word	0xff1f0efe

08002cb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x20>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0dc      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1da>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d81c      	bhi.n	8002d22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b05      	subs	r3, #5
 8002cfa:	221f      	movs	r2, #31
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4019      	ands	r1, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b05      	subs	r3, #5
 8002d14:	fa00 f203 	lsl.w	r2, r0, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d20:	e03c      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d81c      	bhi.n	8002d64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b23      	subs	r3, #35	; 0x23
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4019      	ands	r1, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3b23      	subs	r3, #35	; 0x23
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
 8002d62:	e01b      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	3b41      	subs	r3, #65	; 0x41
 8002d76:	221f      	movs	r2, #31
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	4019      	ands	r1, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b41      	subs	r3, #65	; 0x41
 8002d90:	fa00 f203 	lsl.w	r2, r0, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d91c      	bls.n	8002dde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68d9      	ldr	r1, [r3, #12]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4019      	ands	r1, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6898      	ldr	r0, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b1e      	subs	r3, #30
 8002dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e019      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6919      	ldr	r1, [r3, #16]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4019      	ands	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6898      	ldr	r0, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d003      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e1e:	2b11      	cmp	r3, #17
 8002e20:	d132      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_ADC_ConfigChannel+0x1e4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d125      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d126      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d11a      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	0c9a      	lsrs	r2, r3, #18
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e68:	e002      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x1b2>
 8002e76:	e007      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012400 	.word	0x40012400
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	431bde83 	.word	0x431bde83

08002ea8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d12e      	bne.n	8002f20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ed2:	f7ff fdeb 	bl	8002aac <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ed8:	e01b      	b.n	8002f12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eda:	f7ff fde7 	bl	8002aac <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d914      	bls.n	8002f12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10d      	bne.n	8002f12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e007      	b.n	8002f22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d0dc      	beq.n	8002eda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff90 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff49 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff5e 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff90 	bl	8002fe4 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5f 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffb0 	bl	8003048 <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b08b      	sub	sp, #44	; 0x2c
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003106:	e148      	b.n	800339a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003108:	2201      	movs	r2, #1
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8137 	bne.w	8003394 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4aa3      	ldr	r2, [pc, #652]	; (80033b8 <HAL_GPIO_Init+0x2c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d05e      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
 8003130:	4aa1      	ldr	r2, [pc, #644]	; (80033b8 <HAL_GPIO_Init+0x2c4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d875      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 8003136:	4aa1      	ldr	r2, [pc, #644]	; (80033bc <HAL_GPIO_Init+0x2c8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d058      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
 800313c:	4a9f      	ldr	r2, [pc, #636]	; (80033bc <HAL_GPIO_Init+0x2c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d86f      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 8003142:	4a9f      	ldr	r2, [pc, #636]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d052      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
 8003148:	4a9d      	ldr	r2, [pc, #628]	; (80033c0 <HAL_GPIO_Init+0x2cc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d869      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 800314e:	4a9d      	ldr	r2, [pc, #628]	; (80033c4 <HAL_GPIO_Init+0x2d0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04c      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
 8003154:	4a9b      	ldr	r2, [pc, #620]	; (80033c4 <HAL_GPIO_Init+0x2d0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d863      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 800315a:	4a9b      	ldr	r2, [pc, #620]	; (80033c8 <HAL_GPIO_Init+0x2d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d046      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
 8003160:	4a99      	ldr	r2, [pc, #612]	; (80033c8 <HAL_GPIO_Init+0x2d4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d85d      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 8003166:	2b12      	cmp	r3, #18
 8003168:	d82a      	bhi.n	80031c0 <HAL_GPIO_Init+0xcc>
 800316a:	2b12      	cmp	r3, #18
 800316c:	d859      	bhi.n	8003222 <HAL_GPIO_Init+0x12e>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_GPIO_Init+0x80>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031ef 	.word	0x080031ef
 8003178:	080031c9 	.word	0x080031c9
 800317c:	080031db 	.word	0x080031db
 8003180:	0800321d 	.word	0x0800321d
 8003184:	08003223 	.word	0x08003223
 8003188:	08003223 	.word	0x08003223
 800318c:	08003223 	.word	0x08003223
 8003190:	08003223 	.word	0x08003223
 8003194:	08003223 	.word	0x08003223
 8003198:	08003223 	.word	0x08003223
 800319c:	08003223 	.word	0x08003223
 80031a0:	08003223 	.word	0x08003223
 80031a4:	08003223 	.word	0x08003223
 80031a8:	08003223 	.word	0x08003223
 80031ac:	08003223 	.word	0x08003223
 80031b0:	08003223 	.word	0x08003223
 80031b4:	08003223 	.word	0x08003223
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031e5 	.word	0x080031e5
 80031c0:	4a82      	ldr	r2, [pc, #520]	; (80033cc <HAL_GPIO_Init+0x2d8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031c6:	e02c      	b.n	8003222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	623b      	str	r3, [r7, #32]
          break;
 80031ce:	e029      	b.n	8003224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	3304      	adds	r3, #4
 80031d6:	623b      	str	r3, [r7, #32]
          break;
 80031d8:	e024      	b.n	8003224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	3308      	adds	r3, #8
 80031e0:	623b      	str	r3, [r7, #32]
          break;
 80031e2:	e01f      	b.n	8003224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	330c      	adds	r3, #12
 80031ea:	623b      	str	r3, [r7, #32]
          break;
 80031ec:	e01a      	b.n	8003224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031f6:	2304      	movs	r3, #4
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e013      	b.n	8003224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	611a      	str	r2, [r3, #16]
          break;
 800320e:	e009      	b.n	8003224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003210:	2308      	movs	r3, #8
 8003212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	615a      	str	r2, [r3, #20]
          break;
 800321a:	e003      	b.n	8003224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
          break;
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x130>
          break;
 8003222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2bff      	cmp	r3, #255	; 0xff
 8003228:	d801      	bhi.n	800322e <HAL_GPIO_Init+0x13a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	e001      	b.n	8003232 <HAL_GPIO_Init+0x13e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2bff      	cmp	r3, #255	; 0xff
 8003238:	d802      	bhi.n	8003240 <HAL_GPIO_Init+0x14c>
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	e002      	b.n	8003246 <HAL_GPIO_Init+0x152>
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	3b08      	subs	r3, #8
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	210f      	movs	r1, #15
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	6a39      	ldr	r1, [r7, #32]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	431a      	orrs	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8090 	beq.w	8003394 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003274:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4a55      	ldr	r2, [pc, #340]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6193      	str	r3, [r2, #24]
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_GPIO_Init+0x2dc>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800328c:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_GPIO_Init+0x2e4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00d      	beq.n	80032d4 <HAL_GPIO_Init+0x1e0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_GPIO_Init+0x2ec>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_GPIO_Init+0x1d8>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e004      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032cc:	2303      	movs	r3, #3
 80032ce:	e002      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_GPIO_Init+0x1e2>
 80032d4:	2300      	movs	r3, #0
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	f002 0203 	and.w	r2, r2, #3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	4093      	lsls	r3, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e6:	493b      	ldr	r1, [pc, #236]	; (80033d4 <HAL_GPIO_Init+0x2e0>)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003300:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4937      	ldr	r1, [pc, #220]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800330e:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	4933      	ldr	r1, [pc, #204]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003318:	4013      	ands	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	4929      	ldr	r1, [pc, #164]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003340:	4013      	ands	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4923      	ldr	r1, [pc, #140]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	43db      	mvns	r3, r3
 8003366:	491f      	ldr	r1, [pc, #124]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003368:	4013      	ands	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	4919      	ldr	r1, [pc, #100]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003386:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	43db      	mvns	r3, r3
 800338e:	4915      	ldr	r1, [pc, #84]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 8003390:	4013      	ands	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	3301      	adds	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f aeaf 	bne.w	8003108 <HAL_GPIO_Init+0x14>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	372c      	adds	r7, #44	; 0x2c
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	10320000 	.word	0x10320000
 80033bc:	10310000 	.word	0x10310000
 80033c0:	10220000 	.word	0x10220000
 80033c4:	10210000 	.word	0x10210000
 80033c8:	10120000 	.word	0x10120000
 80033cc:	10110000 	.word	0x10110000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40010800 	.word	0x40010800
 80033dc:	40010c00 	.word	0x40010c00
 80033e0:	40011000 	.word	0x40011000
 80033e4:	40010400 	.word	0x40010400

080033e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e001      	b.n	800340a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	807b      	strh	r3, [r7, #2]
 8003422:	4613      	mov	r3, r2
 8003424:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003426:	787b      	ldrb	r3, [r7, #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003432:	e003      	b.n	800343c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	041a      	lsls	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
	...

08003448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e26c      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003468:	4b92      	ldr	r3, [pc, #584]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b04      	cmp	r3, #4
 8003472:	d00c      	beq.n	800348e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003474:	4b8f      	ldr	r3, [pc, #572]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d112      	bne.n	80034a6 <HAL_RCC_OscConfig+0x5e>
 8003480:	4b8c      	ldr	r3, [pc, #560]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d10b      	bne.n	80034a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348e:	4b89      	ldr	r3, [pc, #548]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d06c      	beq.n	8003574 <HAL_RCC_OscConfig+0x12c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d168      	bne.n	8003574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e246      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x76>
 80034b0:	4b80      	ldr	r3, [pc, #512]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a7f      	ldr	r2, [pc, #508]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	e02e      	b.n	800351c <HAL_RCC_OscConfig+0xd4>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x98>
 80034c6:	4b7b      	ldr	r3, [pc, #492]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7a      	ldr	r2, [pc, #488]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e01d      	b.n	800351c <HAL_RCC_OscConfig+0xd4>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0xbc>
 80034ea:	4b72      	ldr	r3, [pc, #456]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a71      	ldr	r2, [pc, #452]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6e      	ldr	r2, [pc, #440]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0xd4>
 8003504:	4b6b      	ldr	r3, [pc, #428]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6a      	ldr	r2, [pc, #424]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a67      	ldr	r2, [pc, #412]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff fac2 	bl	8002aac <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff fabe 	bl	8002aac <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1fa      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0xe4>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7ff faae 	bl	8002aac <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7ff faaa 	bl	8002aac <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1e6      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x10c>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003582:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800358e:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x18c>
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x176>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1ba      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4939      	ldr	r1, [pc, #228]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	e03a      	b.n	800364a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_OscConfig+0x270>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7ff fa63 	bl	8002aac <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ea:	f7ff fa5f 	bl	8002aac <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e19b      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4927      	ldr	r1, [pc, #156]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <HAL_RCC_OscConfig+0x270>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7ff fa42 	bl	8002aac <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362c:	f7ff fa3e 	bl	8002aac <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e17a      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03a      	beq.n	80036cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d019      	beq.n	8003692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_RCC_OscConfig+0x274>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7ff fa22 	bl	8002aac <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366c:	f7ff fa1e 	bl	8002aac <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e15a      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800368a:	2001      	movs	r0, #1
 800368c:	f000 faa6 	bl	8003bdc <RCC_Delay>
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_OscConfig+0x274>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7ff fa08 	bl	8002aac <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a0:	f7ff fa04 	bl	8002aac <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d908      	bls.n	80036c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e140      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	42420000 	.word	0x42420000
 80036bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b9e      	ldr	r3, [pc, #632]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e9      	bne.n	80036a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a6 	beq.w	8003826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b97      	ldr	r3, [pc, #604]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	4b94      	ldr	r3, [pc, #592]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4a93      	ldr	r2, [pc, #588]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	61d3      	str	r3, [r2, #28]
 80036f6:	4b91      	ldr	r3, [pc, #580]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b8e      	ldr	r3, [pc, #568]	; (8003940 <HAL_RCC_OscConfig+0x4f8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b8b      	ldr	r3, [pc, #556]	; (8003940 <HAL_RCC_OscConfig+0x4f8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a8a      	ldr	r2, [pc, #552]	; (8003940 <HAL_RCC_OscConfig+0x4f8>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7ff f9c5 	bl	8002aac <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7ff f9c1 	bl	8002aac <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0fd      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCC_OscConfig+0x4f8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x312>
 800374c:	4b7b      	ldr	r3, [pc, #492]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4a7a      	ldr	r2, [pc, #488]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6213      	str	r3, [r2, #32]
 8003758:	e02d      	b.n	80037b6 <HAL_RCC_OscConfig+0x36e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x334>
 8003762:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a72      	ldr	r2, [pc, #456]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	6213      	str	r3, [r2, #32]
 800377a:	e01c      	b.n	80037b6 <HAL_RCC_OscConfig+0x36e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b05      	cmp	r3, #5
 8003782:	d10c      	bne.n	800379e <HAL_RCC_OscConfig+0x356>
 8003784:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a6c      	ldr	r2, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4a69      	ldr	r2, [pc, #420]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6213      	str	r3, [r2, #32]
 800379c:	e00b      	b.n	80037b6 <HAL_RCC_OscConfig+0x36e>
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a66      	ldr	r2, [pc, #408]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6213      	str	r3, [r2, #32]
 80037aa:	4b64      	ldr	r3, [pc, #400]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4a63      	ldr	r2, [pc, #396]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d015      	beq.n	80037ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7ff f975 	bl	8002aac <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7ff f971 	bl	8002aac <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0ab      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RCC_OscConfig+0x37e>
 80037e8:	e014      	b.n	8003814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7ff f95f 	bl	8002aac <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7ff f95b 	bl	8002aac <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e095      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ee      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4a47      	ldr	r2, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8081 	beq.w	8003932 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003830:	4b42      	ldr	r3, [pc, #264]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d061      	beq.n	8003900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d146      	bne.n	80038d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003844:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <HAL_RCC_OscConfig+0x4fc>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7ff f92f 	bl	8002aac <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7ff f92b 	bl	8002aac <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e067      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003864:	4b35      	ldr	r3, [pc, #212]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d108      	bne.n	800388c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800387a:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	492d      	ldr	r1, [pc, #180]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388c:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a19      	ldr	r1, [r3, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	430b      	orrs	r3, r1
 800389e:	4927      	ldr	r1, [pc, #156]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x4fc>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7ff f8ff 	bl	8002aac <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b2:	f7ff f8fb 	bl	8002aac <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e037      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x46a>
 80038d0:	e02f      	b.n	8003932 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <HAL_RCC_OscConfig+0x4fc>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7ff f8e8 	bl	8002aac <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7ff f8e4 	bl	8002aac <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e020      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x498>
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e013      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x4f4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
 8003944:	42420060 	.word	0x42420060

08003948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0d0      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 0207 	bic.w	r2, r3, #7
 8003972:	4965      	ldr	r1, [pc, #404]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0b8      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a4:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039bc:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a52      	ldr	r2, [pc, #328]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	494d      	ldr	r1, [pc, #308]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d040      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d115      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e07f      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e073      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06b      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4936      	ldr	r1, [pc, #216]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a38:	f7ff f838 	bl	8002aac <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7ff f834 	bl	8002aac <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e053      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d210      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4922      	ldr	r1, [pc, #136]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e032      	b.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4916      	ldr	r1, [pc, #88]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	490e      	ldr	r1, [pc, #56]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ad6:	f000 f821 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ada:	4602      	mov	r2, r0
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	490a      	ldr	r1, [pc, #40]	; (8003b10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	5ccb      	ldrb	r3, [r1, r3]
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <HAL_RCC_ClockConfig+0x1cc>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_RCC_ClockConfig+0x1d0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe ff96 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	080048d4 	.word	0x080048d4
 8003b14:	20000010 	.word	0x20000010
 8003b18:	20000014 	.word	0x20000014

08003b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b490      	push	{r4, r7}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b24:	1d3c      	adds	r4, r7, #4
 8003b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b2c:	f240 2301 	movw	r3, #513	; 0x201
 8003b30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b46:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x40>
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x46>
 8003b5a:	e02d      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5e:	623b      	str	r3, [r7, #32]
      break;
 8003b60:	e02d      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	0c9b      	lsrs	r3, r3, #18
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b6e:	4413      	add	r3, r2
 8003b70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c5b      	lsrs	r3, r3, #17
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b8e:	4413      	add	r3, r2
 8003b90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	fb02 f203 	mul.w	r2, r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	623b      	str	r3, [r7, #32]
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bba:	623b      	str	r3, [r7, #32]
      break;
 8003bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc90      	pop	{r4, r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	08004864 	.word	0x08004864
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	007a1200 	.word	0x007a1200
 8003bd8:	003d0900 	.word	0x003d0900

08003bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <RCC_Delay+0x34>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <RCC_Delay+0x38>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a5b      	lsrs	r3, r3, #9
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bf8:	bf00      	nop
  }
  while (Delay --);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <RCC_Delay+0x1c>
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000010 	.word	0x20000010
 8003c14:	10624dd3 	.word	0x10624dd3

08003c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c38:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	61d3      	str	r3, [r2, #28]
 8003c50:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d118      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c78:	f7fe ff18 	bl	8002aac <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	e008      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c80:	f7fe ff14 	bl	8002aac <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06d      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d027      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd2:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fee3 	bl	8002aac <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe fedf 	bl	8002aac <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ee      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	490b      	ldr	r1, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42420440 	.word	0x42420440

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e041      	b.n	8003e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe fd3a 	bl	8002824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fa96 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e041      	b.n	8003eb8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f839 	bl	8003ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fa47 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x24>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e022      	b.n	8003f3e <HAL_TIM_PWM_Start+0x6a>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d109      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x3e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e015      	b.n	8003f3e <HAL_TIM_PWM_Start+0x6a>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d109      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x58>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e008      	b.n	8003f3e <HAL_TIM_PWM_Start+0x6a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e04c      	b.n	8003fe0 <HAL_TIM_PWM_Start+0x10c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x82>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	e013      	b.n	8003f7e <HAL_TIM_PWM_Start+0xaa>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x92>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	e00b      	b.n	8003f7e <HAL_TIM_PWM_Start+0xaa>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xa2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	e003      	b.n	8003f7e <HAL_TIM_PWM_Start+0xaa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2201      	movs	r2, #1
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fb8f 	bl	80046aa <TIM_CCxChannelCmd>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_PWM_Start+0xd6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a13      	ldr	r2, [pc, #76]	; (8003fe8 <HAL_TIM_PWM_Start+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_PWM_Start+0xd6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a11      	ldr	r2, [pc, #68]	; (8003fec <HAL_TIM_PWM_Start+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d111      	bne.n	8003fce <HAL_TIM_PWM_Start+0xfa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d010      	beq.n	8003fde <HAL_TIM_PWM_Start+0x10a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	e007      	b.n	8003fde <HAL_TIM_PWM_Start+0x10a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800

08003ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004006:	2302      	movs	r3, #2
 8004008:	e0ac      	b.n	8004164 <HAL_TIM_PWM_ConfigChannel+0x174>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b0c      	cmp	r3, #12
 8004016:	f200 809f 	bhi.w	8004158 <HAL_TIM_PWM_ConfigChannel+0x168>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004055 	.word	0x08004055
 8004024:	08004159 	.word	0x08004159
 8004028:	08004159 	.word	0x08004159
 800402c:	08004159 	.word	0x08004159
 8004030:	08004095 	.word	0x08004095
 8004034:	08004159 	.word	0x08004159
 8004038:	08004159 	.word	0x08004159
 800403c:	08004159 	.word	0x08004159
 8004040:	080040d7 	.word	0x080040d7
 8004044:	08004159 	.word	0x08004159
 8004048:	08004159 	.word	0x08004159
 800404c:	08004159 	.word	0x08004159
 8004050:	08004117 	.word	0x08004117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f99a 	bl	8004394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0204 	bic.w	r2, r2, #4
 800407e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
      break;
 8004092:	e062      	b.n	800415a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f9b6 	bl	800440c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6999      	ldr	r1, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	619a      	str	r2, [r3, #24]
      break;
 80040d4:	e041      	b.n	800415a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f9d3 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0208 	orr.w	r2, r2, #8
 80040f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0204 	bic.w	r2, r2, #4
 8004100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69d9      	ldr	r1, [r3, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	61da      	str	r2, [r3, #28]
      break;
 8004114:	e021      	b.n	800415a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f9f0 	bl	8004502 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69d9      	ldr	r1, [r3, #28]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	021a      	lsls	r2, r3, #8
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	61da      	str	r2, [r3, #28]
      break;
 8004156:	e000      	b.n	800415a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIM_ConfigClockSource+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e0b3      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x180>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041bc:	d03e      	beq.n	800423c <HAL_TIM_ConfigClockSource+0xd0>
 80041be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c2:	f200 8087 	bhi.w	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	f000 8085 	beq.w	80042d8 <HAL_TIM_ConfigClockSource+0x16c>
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d87f      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041d4:	2b70      	cmp	r3, #112	; 0x70
 80041d6:	d01a      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xa2>
 80041d8:	2b70      	cmp	r3, #112	; 0x70
 80041da:	d87b      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d050      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x116>
 80041e0:	2b60      	cmp	r3, #96	; 0x60
 80041e2:	d877      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041e4:	2b50      	cmp	r3, #80	; 0x50
 80041e6:	d03c      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xf6>
 80041e8:	2b50      	cmp	r3, #80	; 0x50
 80041ea:	d873      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d058      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x136>
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d86f      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041f4:	2b30      	cmp	r3, #48	; 0x30
 80041f6:	d064      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x156>
 80041f8:	2b30      	cmp	r3, #48	; 0x30
 80041fa:	d86b      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d060      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x156>
 8004200:	2b20      	cmp	r3, #32
 8004202:	d867      	bhi.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05c      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x156>
 8004208:	2b10      	cmp	r3, #16
 800420a:	d05a      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800420c:	e062      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f000 fa25 	bl	800466c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004230:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	609a      	str	r2, [r3, #8]
      break;
 800423a:	e04e      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6899      	ldr	r1, [r3, #8]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f000 fa0e 	bl	800466c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800425e:	609a      	str	r2, [r3, #8]
      break;
 8004260:	e03b      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	461a      	mov	r2, r3
 8004270:	f000 f985 	bl	800457e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2150      	movs	r1, #80	; 0x50
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f9dc 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 8004280:	e02b      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f000 f9a3 	bl	80045da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2160      	movs	r1, #96	; 0x60
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f9cc 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e01b      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 f965 	bl	800457e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f9bc 	bl	8004638 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e00b      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f000 f9b3 	bl	8004638 <TIM_ITRx_SetConfig>
        break;
 80042d2:	e002      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d007      	beq.n	800431c <TIM_Base_SetConfig+0x28>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1f      	ldr	r2, [pc, #124]	; (800438c <TIM_Base_SetConfig+0x98>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_Base_SetConfig+0x28>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <TIM_Base_SetConfig+0x9c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x52>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <TIM_Base_SetConfig+0x98>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x52>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <TIM_Base_SetConfig+0x9c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	615a      	str	r2, [r3, #20]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800

08004394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0302 	bic.w	r3, r3, #2
 80043dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0210 	bic.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0320 	bic.w	r3, r3, #32
 8004456:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr

08004502 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800454c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	031b      	lsls	r3, r3, #12
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f023 0201 	bic.w	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 030a 	bic.w	r3, r3, #10
 80045ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	f043 0307 	orr.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	609a      	str	r2, [r3, #8]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	431a      	orrs	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2201      	movs	r2, #1
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	401a      	ands	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e041      	b.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d009      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	4313      	orrs	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	2600      	movs	r6, #0
 80047a8:	4d0c      	ldr	r5, [pc, #48]	; (80047dc <__libc_init_array+0x38>)
 80047aa:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	f000 f822 	bl	80047fc <_init>
 80047b8:	2600      	movs	r6, #0
 80047ba:	4d0a      	ldr	r5, [pc, #40]	; (80047e4 <__libc_init_array+0x40>)
 80047bc:	4c0a      	ldr	r4, [pc, #40]	; (80047e8 <__libc_init_array+0x44>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	080048e4 	.word	0x080048e4
 80047e0:	080048e4 	.word	0x080048e4
 80047e4:	080048e4 	.word	0x080048e4
 80047e8:	080048e8 	.word	0x080048e8

080047ec <memset>:
 80047ec:	4603      	mov	r3, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
