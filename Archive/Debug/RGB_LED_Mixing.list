
RGB_LED_Mixing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b38  08002b38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b38  08002b38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b38  08002b38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002b4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002b4c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009988  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a0  00000000  00000000  000299bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019172  00000000  00000000  0002c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b411  00000000  00000000  0004583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009801a  00000000  00000000  00050c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000e8cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a94 	.word	0x08002a94

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002a94 	.word	0x08002a94

08000224 <delay>:
	HAL_GPIO_WritePin(DIGIT7_GPIO_Port, DIGIT7_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIGIT8_GPIO_Port, DIGIT8_Pin, GPIO_PIN_SET);
}

void delay(int i)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	for(int j=0;j<i;i++)
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e002      	b.n	8000238 <delay+0x14>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	429a      	cmp	r2, r3
 800023e:	dbf8      	blt.n	8000232 <delay+0xe>
	{

	}
}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <initSEG>:

void initSEG(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	uint16_t pinportA = SEG_A_Pin;
 8000252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000256:	80fb      	strh	r3, [r7, #6]
	uint16_t pinportC = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8000258:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800025c:	80bb      	strh	r3, [r7, #4]
	uint16_t pinportB = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT1_Pin|DIGIT2_Pin|DIGIT3_Pin|DIGIT4_Pin|DIGIT5_Pin|DIGIT6_Pin|DIGIT7_Pin|DIGIT8_Pin;
 800025e:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 8000262:	807b      	strh	r3, [r7, #2]
	uint16_t pinportD = SEG_E_Pin;
 8000264:	2304      	movs	r3, #4
 8000266:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, pinportA, GPIO_PIN_RESET);
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	2200      	movs	r2, #0
 800026c:	4619      	mov	r1, r3
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <initSEG+0x54>)
 8000270:	f001 f9db 	bl	800162a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_B_GPIO_Port,pinportC , GPIO_PIN_RESET);
 8000274:	88bb      	ldrh	r3, [r7, #4]
 8000276:	2200      	movs	r2, #0
 8000278:	4619      	mov	r1, r3
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <initSEG+0x58>)
 800027c:	f001 f9d5 	bl	800162a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_E_GPIO_Port, pinportD, GPIO_PIN_RESET);
 8000280:	883b      	ldrh	r3, [r7, #0]
 8000282:	2200      	movs	r2, #0
 8000284:	4619      	mov	r1, r3
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <initSEG+0x5c>)
 8000288:	f001 f9cf 	bl	800162a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_F_GPIO_Port,pinportB , GPIO_PIN_RESET);
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	2200      	movs	r2, #0
 8000290:	4619      	mov	r1, r3
 8000292:	4806      	ldr	r0, [pc, #24]	; (80002ac <initSEG+0x60>)
 8000294:	f001 f9c9 	bl	800162a <HAL_GPIO_WritePin>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40011000 	.word	0x40011000
 80002a8:	40011400 	.word	0x40011400
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <printchar>:
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;
}

void printchar(int chara,uint16_t Pin)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	807b      	strh	r3, [r7, #2]
	int segmA =(0x01&(SevenSegmentASCII[chara-32]));
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3b20      	subs	r3, #32
 80002c0:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <printchar+0x118>)
 80002c2:	5cd3      	ldrb	r3, [r2, r3]
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
	int segmB =(0x02&(SevenSegmentASCII[chara-32]));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3b20      	subs	r3, #32
 80002ce:	4a3e      	ldr	r2, [pc, #248]	; (80003c8 <printchar+0x118>)
 80002d0:	5cd3      	ldrb	r3, [r2, r3]
 80002d2:	f003 0302 	and.w	r3, r3, #2
 80002d6:	623b      	str	r3, [r7, #32]
	int segmC =(0x04&(SevenSegmentASCII[chara-32]));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3b20      	subs	r3, #32
 80002dc:	4a3a      	ldr	r2, [pc, #232]	; (80003c8 <printchar+0x118>)
 80002de:	5cd3      	ldrb	r3, [r2, r3]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	61fb      	str	r3, [r7, #28]
	int segmD =(0x08&(SevenSegmentASCII[chara-32]));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3b20      	subs	r3, #32
 80002ea:	4a37      	ldr	r2, [pc, #220]	; (80003c8 <printchar+0x118>)
 80002ec:	5cd3      	ldrb	r3, [r2, r3]
 80002ee:	f003 0308 	and.w	r3, r3, #8
 80002f2:	61bb      	str	r3, [r7, #24]
	int segmE =(0x10&(SevenSegmentASCII[chara-32]));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3b20      	subs	r3, #32
 80002f8:	4a33      	ldr	r2, [pc, #204]	; (80003c8 <printchar+0x118>)
 80002fa:	5cd3      	ldrb	r3, [r2, r3]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	617b      	str	r3, [r7, #20]
	int segmF =(0x20&(SevenSegmentASCII[chara-32]));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3b20      	subs	r3, #32
 8000306:	4a30      	ldr	r2, [pc, #192]	; (80003c8 <printchar+0x118>)
 8000308:	5cd3      	ldrb	r3, [r2, r3]
 800030a:	f003 0320 	and.w	r3, r3, #32
 800030e:	613b      	str	r3, [r7, #16]
	int segmG =(0x40&(SevenSegmentASCII[chara-32]));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b20      	subs	r3, #32
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <printchar+0x118>)
 8000316:	5cd3      	ldrb	r3, [r2, r3]
 8000318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800031c:	60fb      	str	r3, [r7, #12]
	int segmDP =(0x80&(SevenSegmentASCII[chara-32]));
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3b20      	subs	r3, #32
 8000322:	4a29      	ldr	r2, [pc, #164]	; (80003c8 <printchar+0x118>)
 8000324:	5cd3      	ldrb	r3, [r2, r3]
 8000326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032a:	60bb      	str	r3, [r7, #8]
	initSEG();
	GPIOC->ODR = pinsegBCD;
	GPIOA->ODR = pinsegA;
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;*/
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, segmA);
 800032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032e:	b2db      	uxtb	r3, r3
 8000330:	461a      	mov	r2, r3
 8000332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000336:	4825      	ldr	r0, [pc, #148]	; (80003cc <printchar+0x11c>)
 8000338:	f001 f977 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, segmB>>1);
 800033c:	6a3b      	ldr	r3, [r7, #32]
 800033e:	105b      	asrs	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000348:	4821      	ldr	r0, [pc, #132]	; (80003d0 <printchar+0x120>)
 800034a:	f001 f96e 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, segmC>>2);
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	109b      	asrs	r3, r3, #2
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035a:	481d      	ldr	r0, [pc, #116]	; (80003d0 <printchar+0x120>)
 800035c:	f001 f965 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, segmD>>3);
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	10db      	asrs	r3, r3, #3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036c:	4818      	ldr	r0, [pc, #96]	; (80003d0 <printchar+0x120>)
 800036e:	f001 f95c 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, segmE>>4);
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	111b      	asrs	r3, r3, #4
 8000376:	b2db      	uxtb	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	2104      	movs	r1, #4
 800037c:	4815      	ldr	r0, [pc, #84]	; (80003d4 <printchar+0x124>)
 800037e:	f001 f954 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, segmF>>5);
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	115b      	asrs	r3, r3, #5
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	2108      	movs	r1, #8
 800038c:	4812      	ldr	r0, [pc, #72]	; (80003d8 <printchar+0x128>)
 800038e:	f001 f94c 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, segmG>>6);
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	119b      	asrs	r3, r3, #6
 8000396:	b2db      	uxtb	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	2110      	movs	r1, #16
 800039c:	480e      	ldr	r0, [pc, #56]	; (80003d8 <printchar+0x128>)
 800039e:	f001 f944 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, segmDP>>7);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	11db      	asrs	r3, r3, #7
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2120      	movs	r1, #32
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <printchar+0x128>)
 80003ae:	f001 f93c 	bl	800162a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_SET);
 80003b2:	887b      	ldrh	r3, [r7, #2]
 80003b4:	2201      	movs	r2, #1
 80003b6:	4619      	mov	r1, r3
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <printchar+0x128>)
 80003ba:	f001 f936 	bl	800162a <HAL_GPIO_WritePin>
}
 80003be:	bf00      	nop
 80003c0:	3728      	adds	r7, #40	; 0x28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08002ac8 	.word	0x08002ac8
 80003cc:	40010800 	.word	0x40010800
 80003d0:	40011000 	.word	0x40011000
 80003d4:	40011400 	.word	0x40011400
 80003d8:	40010c00 	.word	0x40010c00

080003dc <printFigures>:


void printFigures(int number,uint16_t Pin, int leading_zero)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	460b      	mov	r3, r1
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	817b      	strh	r3, [r7, #10]
	printchar(number+48,Pin);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3330      	adds	r3, #48	; 0x30
 80003ee:	897a      	ldrh	r2, [r7, #10]
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff5c 	bl	80002b0 <printchar>

	if(!leading_zero)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d108      	bne.n	8000410 <printFigures+0x34>
	{
		if(number==0)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <printFigures+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_RESET);
 8000404:	897b      	ldrh	r3, [r7, #10]
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	4803      	ldr	r0, [pc, #12]	; (8000418 <printFigures+0x3c>)
 800040c:	f001 f90d 	bl	800162a <HAL_GPIO_WritePin>
		}
	}
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010c00 	.word	0x40010c00

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b093      	sub	sp, #76	; 0x4c
 8000420:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000422:	f000 fbed 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f87d 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f000 f9e7 	bl	80007fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800042e:	f000 f8cd 	bl	80005cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000432:	f000 f909 	bl	8000648 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000436:	f000 f993 	bl	8000760 <MX_TIM3_Init>





	char word[9]="BICHONS.";
 800043a:	4a37      	ldr	r2, [pc, #220]	; (8000518 <main+0xfc>)
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	ca07      	ldmia	r2, {r0, r1, r2}
 8000442:	c303      	stmia	r3!, {r0, r1}
 8000444:	701a      	strb	r2, [r3, #0]
	int i=0;
 8000446:	2300      	movs	r3, #0
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
	int delai=1000;
 800044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044e:	63bb      	str	r3, [r7, #56]	; 0x38
	int A1=0; int A2;int B1;	int B2;	int SW1; int SW2;int digit[4];
 8000450:	2300      	movs	r3, #0
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
	int lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8000454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000458:	4830      	ldr	r0, [pc, #192]	; (800051c <main+0x100>)
 800045a:	f001 f8cf 	bl	80015fc <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
	int position_compteur=5;
 8000462:	2305      	movs	r3, #5
 8000464:	643b      	str	r3, [r7, #64]	; 0x40
	initSEG();
 8000466:	f7ff fef1 	bl	800024c <initSEG>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		A1= HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800046a:	2104      	movs	r1, #4
 800046c:	482c      	ldr	r0, [pc, #176]	; (8000520 <main+0x104>)
 800046e:	f001 f8c5 	bl	80015fc <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	637b      	str	r3, [r7, #52]	; 0x34
		B1= HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8000476:	2102      	movs	r1, #2
 8000478:	4829      	ldr	r0, [pc, #164]	; (8000520 <main+0x104>)
 800047a:	f001 f8bf 	bl	80015fc <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
		B2= HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8000482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000486:	4825      	ldr	r0, [pc, #148]	; (800051c <main+0x100>)
 8000488:	f001 f8b8 	bl	80015fc <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000490:	2101      	movs	r1, #1
 8000492:	4823      	ldr	r0, [pc, #140]	; (8000520 <main+0x104>)
 8000494:	f001 f8b2 	bl	80015fc <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
		SW2= HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 800049c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a0:	481e      	ldr	r0, [pc, #120]	; (800051c <main+0x100>)
 80004a2:	f001 f8ab 	bl	80015fc <HAL_GPIO_ReadPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24


		if(SW2==0)
 80004aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d109      	bne.n	80004c4 <main+0xa8>
		{
			printFigures(0, DIGIT4_Pin,GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2140      	movs	r1, #64	; 0x40
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff91 	bl	80003dc <printFigures>
			position_compteur=0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	643b      	str	r3, [r7, #64]	; 0x40
			delay(delai);
 80004be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80004c0:	f7ff feb0 	bl	8000224 <delay>
		}
		A2= HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 80004c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c8:	4814      	ldr	r0, [pc, #80]	; (800051c <main+0x100>)
 80004ca:	f001 f897 	bl	80015fc <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	623b      	str	r3, [r7, #32]
		if(A2!=lastState)
 80004d2:	6a3a      	ldr	r2, [r7, #32]
 80004d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d015      	beq.n	8000506 <main+0xea>
		{

			if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <main+0x100>)
 80004e0:	f001 f88c 	bl	80015fc <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461c      	mov	r4, r3
 80004e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <main+0x100>)
 80004ee:	f001 f885 	bl	80015fc <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	429c      	cmp	r4, r3
 80004f6:	d003      	beq.n	8000500 <main+0xe4>
			{
				position_compteur++;
 80004f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004fa:	3301      	adds	r3, #1
 80004fc:	643b      	str	r3, [r7, #64]	; 0x40
 80004fe:	e002      	b.n	8000506 <main+0xea>
			}
			else
			{
				position_compteur--;
 8000500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000502:	3b01      	subs	r3, #1
 8000504:	643b      	str	r3, [r7, #64]	; 0x40
			}
		}

		printchar(position_compteur+48, DIGIT4_Pin);
 8000506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000508:	3330      	adds	r3, #48	; 0x30
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fecf 	bl	80002b0 <printchar>
		lastState=B2;
 8000512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
		A1= HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000516:	e7a8      	b.n	800046a <main+0x4e>
 8000518:	08002aac 	.word	0x08002aac
 800051c:	40011000 	.word	0x40011000
 8000520:	40010c00 	.word	0x40010c00

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052e:	2228      	movs	r2, #40	; 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 faa6 	bl	8002a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
 8000556:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f875 	bl	800165c <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000578:	f000 fa02 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000588:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fadf 	bl	8001b5c <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a4:	f000 f9ec 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005a8:	2302      	movs	r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80005ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fc39 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005c0:	f000 f9de 	bl	8000980 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	; 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x74>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x74>)
 800060a:	f000 fb5b 	bl	8000cc4 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f9b4 	bl	8000980 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000618:	2304      	movs	r3, #4
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x74>)
 800062a:	f000 fc35 	bl	8000e98 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000634:	f000 f9a4 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000070 	.word	0x20000070
 8000644:	40012400 	.word	0x40012400

08000648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]
 8000676:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <MX_TIM2_Init+0x114>)
 800067a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <MX_TIM2_Init+0x114>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <MX_TIM2_Init+0x114>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <MX_TIM2_Init+0x114>)
 800068e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <MX_TIM2_Init+0x114>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <MX_TIM2_Init+0x114>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a0:	482e      	ldr	r0, [pc, #184]	; (800075c <MX_TIM2_Init+0x114>)
 80006a2:	f001 fc79 	bl	8001f98 <HAL_TIM_Base_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006ac:	f000 f968 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4827      	ldr	r0, [pc, #156]	; (800075c <MX_TIM2_Init+0x114>)
 80006be:	f001 fdd1 	bl	8002264 <HAL_TIM_ConfigClockSource>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006c8:	f000 f95a 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <MX_TIM2_Init+0x114>)
 80006ce:	f001 fcb2 	bl	8002036 <HAL_TIM_PWM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006d8:	f000 f952 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4619      	mov	r1, r3
 80006ea:	481c      	ldr	r0, [pc, #112]	; (800075c <MX_TIM2_Init+0x114>)
 80006ec:	f002 f93a 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006f6:	f000 f943 	bl	8000980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fa:	2360      	movs	r3, #96	; 0x60
 80006fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2204      	movs	r2, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_TIM2_Init+0x114>)
 8000712:	f001 fce9 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800071c:	f000 f930 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2208      	movs	r2, #8
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_TIM2_Init+0x114>)
 8000728:	f001 fcde 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000732:	f000 f925 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	220c      	movs	r2, #12
 800073a:	4619      	mov	r1, r3
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <MX_TIM2_Init+0x114>)
 800073e:	f001 fcd3 	bl	80020e8 <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000748:	f000 f91a 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <MX_TIM2_Init+0x114>)
 800074e:	f000 f9d3 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 8000752:	bf00      	nop
 8000754:	3738      	adds	r7, #56	; 0x38
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000a0 	.word	0x200000a0

08000760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_TIM3_Init+0x94>)
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <MX_TIM3_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_TIM3_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_TIM3_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_TIM3_Init+0x94>)
 8000790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_TIM3_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_TIM3_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <MX_TIM3_Init+0x94>)
 80007a4:	f001 fbf8 	bl	8001f98 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f8e7 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_TIM3_Init+0x94>)
 80007c0:	f001 fd50 	bl	8002264 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f8d9 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_TIM3_Init+0x94>)
 80007dc:	f002 f8c2 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 f8cb 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000028 	.word	0x20000028
 80007f8:	40000400 	.word	0x40000400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <MX_GPIO_Init+0x170>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <MX_GPIO_Init+0x170>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <MX_GPIO_Init+0x170>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000828:	4b50      	ldr	r3, [pc, #320]	; (800096c <MX_GPIO_Init+0x170>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a4f      	ldr	r2, [pc, #316]	; (800096c <MX_GPIO_Init+0x170>)
 800082e:	f043 0320 	orr.w	r3, r3, #32
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b4d      	ldr	r3, [pc, #308]	; (800096c <MX_GPIO_Init+0x170>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0320 	and.w	r3, r3, #32
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <MX_GPIO_Init+0x170>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a49      	ldr	r2, [pc, #292]	; (800096c <MX_GPIO_Init+0x170>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x170>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b44      	ldr	r3, [pc, #272]	; (800096c <MX_GPIO_Init+0x170>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a43      	ldr	r2, [pc, #268]	; (800096c <MX_GPIO_Init+0x170>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b41      	ldr	r3, [pc, #260]	; (800096c <MX_GPIO_Init+0x170>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 8000870:	2201      	movs	r2, #1
 8000872:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <MX_GPIO_Init+0x174>)
 8000878:	f000 fed7 	bl	800162a <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <MX_GPIO_Init+0x178>)
 8000884:	f000 fed1 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_B_Pin|SEG_C_Pin|SEG_D_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800088e:	483a      	ldr	r0, [pc, #232]	; (8000978 <MX_GPIO_Init+0x17c>)
 8000890:	f000 fecb 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2104      	movs	r1, #4
 8000898:	4838      	ldr	r0, [pc, #224]	; (800097c <MX_GPIO_Init+0x180>)
 800089a:	f000 fec6 	bl	800162a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROT_A_2_Pin ROT_B_2_Pin ROT_SW_2_Pin */
  GPIO_InitStruct.Pin = ROT_A_2_Pin|ROT_B_2_Pin|ROT_SW_2_Pin;
 800089e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4831      	ldr	r0, [pc, #196]	; (8000978 <MX_GPIO_Init+0x17c>)
 80008b4:	f000 fd0e 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_1_Pin ROT_B_1_Pin ROT_A_1_Pin */
  GPIO_InitStruct.Pin = ROT_SW_1_Pin|ROT_B_1_Pin|ROT_A_1_Pin;
 80008b8:	2307      	movs	r3, #7
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <MX_GPIO_Init+0x174>)
 80008cc:	f000 fd02 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT8_Pin DIGIT7_Pin DIGIT6_Pin DIGIT5_Pin
                           DIGIT4_Pin DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 80008d0:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
 80008d4:	613b      	str	r3, [r7, #16]
                          |DIGIT4_Pin|DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x174>)
 80008ea:	f000 fcf3 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_A_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_GPIO_Init+0x178>)
 8000908:	f000 fce4 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_Pin SEG_C_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 800090c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_GPIO_Init+0x17c>)
 8000926:	f000 fcd5 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_E_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 800092a:	2304      	movs	r3, #4
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2302      	movs	r3, #2
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_GPIO_Init+0x180>)
 8000942:	f000 fcc7 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
 8000946:	2338      	movs	r3, #56	; 0x38
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0x174>)
 800095e:	f000 fcb9 	bl	80012d4 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010c00 	.word	0x40010c00
 8000974:	40010800 	.word	0x40010800
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_MspInit+0x5c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_MspInit+0x5c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x5c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_MspInit+0x60>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_MspInit+0x60>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_ADC_MspInit+0x98>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d137      	bne.n	8000a80 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_ADC_MspInit+0x9c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a58:	2338      	movs	r3, #56	; 0x38
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4619      	mov	r1, r3
 8000a66:	480a      	ldr	r0, [pc, #40]	; (8000a90 <HAL_ADC_MspInit+0xa0>)
 8000a68:	f000 fc34 	bl	80012d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a6c:	2330      	movs	r3, #48	; 0x30
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_ADC_MspInit+0xa4>)
 8000a7c:	f000 fc2a 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40012400 	.word	0x40012400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40010800 	.word	0x40010800

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ac2:	e010      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x5c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10b      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_TIM_Base_MspInit+0x58>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40000400 	.word	0x40000400

08000af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b16:	d117      	bne.n	8000b48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_TIM_MspPostInit+0x58>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_TIM_MspPostInit+0x58>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_TIM_MspPostInit+0x58>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b30:	230e      	movs	r3, #14
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <HAL_TIM_MspPostInit+0x5c>)
 8000b44:	f000 fbc6 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f875 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff ffe4 	bl	8000ba6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f001 ff2d 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fc1b 	bl	800041c <main>
  bx lr
 8000be6:	4770      	bx	lr
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf0:	08002b40 	.word	0x08002b40
  ldr r2, =_sbss
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf8:	200000ec 	.word	0x200000ec

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 fb2b 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff feb6 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fb35 	bl	80012ba <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 fb0b 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200000e8 	.word	0x200000e8

08000cc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0ce      	b.n	8000e84 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fe74 	bl	80009f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f9bd 	bl	8001088 <ADC_ConversionStop_Disable>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 80a9 	bne.w	8000e72 <HAL_ADC_Init+0x1ae>
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 80a5 	bne.w	8000e72 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d30:	f023 0302 	bic.w	r3, r3, #2
 8000d34:	f043 0202 	orr.w	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4951      	ldr	r1, [pc, #324]	; (8000e8c <HAL_ADC_Init+0x1c8>)
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d10a      	bne.n	8000d60 <HAL_ADC_Init+0x9c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d52:	d002      	beq.n	8000d5a <HAL_ADC_Init+0x96>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	e004      	b.n	8000d64 <HAL_ADC_Init+0xa0>
 8000d5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d5e:	e001      	b.n	8000d64 <HAL_ADC_Init+0xa0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7b1b      	ldrb	r3, [r3, #12]
 8000d6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7c:	d003      	beq.n	8000d86 <HAL_ADC_Init+0xc2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d102      	bne.n	8000d8c <HAL_ADC_Init+0xc8>
 8000d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8a:	e000      	b.n	8000d8e <HAL_ADC_Init+0xca>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7d1b      	ldrb	r3, [r3, #20]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d119      	bne.n	8000dd0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7b1b      	ldrb	r3, [r3, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	035a      	lsls	r2, r3, #13
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	e00b      	b.n	8000dd0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f043 0220 	orr.w	r2, r3, #32
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_ADC_Init+0x1cc>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e00:	d003      	beq.n	8000e0a <HAL_ADC_Init+0x146>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d104      	bne.n	8000e14 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	051b      	lsls	r3, r3, #20
 8000e12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_ADC_Init+0x1d0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d10b      	bne.n	8000e50 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f023 0303 	bic.w	r3, r3, #3
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4e:	e018      	b.n	8000e82 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	f023 0312 	bic.w	r3, r3, #18
 8000e58:	f043 0210 	orr.w	r2, r3, #16
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f043 0201 	orr.w	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e70:	e007      	b.n	8000e82 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f043 0210 	orr.w	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40013c00 	.word	0x40013c00
 8000e90:	ffe1f7fd 	.word	0xffe1f7fd
 8000e94:	ff1f0efe 	.word	0xff1f0efe

08000e98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x20>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e0dc      	b.n	8001072 <HAL_ADC_ConfigChannel+0x1da>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b06      	cmp	r3, #6
 8000ec6:	d81c      	bhi.n	8000f02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b05      	subs	r3, #5
 8000eda:	221f      	movs	r2, #31
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4019      	ands	r1, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3b05      	subs	r3, #5
 8000ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
 8000f00:	e03c      	b.n	8000f7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b0c      	cmp	r3, #12
 8000f08:	d81c      	bhi.n	8000f44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b23      	subs	r3, #35	; 0x23
 8000f1c:	221f      	movs	r2, #31
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4019      	ands	r1, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b23      	subs	r3, #35	; 0x23
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
 8000f42:	e01b      	b.n	8000f7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3b41      	subs	r3, #65	; 0x41
 8000f56:	221f      	movs	r2, #31
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4019      	ands	r1, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b41      	subs	r3, #65	; 0x41
 8000f70:	fa00 f203 	lsl.w	r2, r0, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d91c      	bls.n	8000fbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68d9      	ldr	r1, [r3, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	3b1e      	subs	r3, #30
 8000f96:	2207      	movs	r2, #7
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4019      	ands	r1, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6898      	ldr	r0, [r3, #8]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	3b1e      	subs	r3, #30
 8000fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	e019      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6919      	ldr	r1, [r3, #16]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	2207      	movs	r2, #7
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6898      	ldr	r0, [r3, #8]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b10      	cmp	r3, #16
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffe:	2b11      	cmp	r3, #17
 8001000:	d132      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_ADC_ConfigChannel+0x1e4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d125      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d126      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001028:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b10      	cmp	r3, #16
 8001030:	d11a      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_ADC_ConfigChannel+0x1e8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_ADC_ConfigChannel+0x1ec>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	0c9a      	lsrs	r2, r3, #18
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001048:	e002      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_ConfigChannel+0x1b2>
 8001056:	e007      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f043 0220 	orr.w	r2, r3, #32
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40012400 	.word	0x40012400
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83

08001088 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12e      	bne.n	8001100 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fdfd 	bl	8000cb0 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	e01b      	b.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ba:	f7ff fdf9 	bl	8000cb0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d914      	bls.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10d      	bne.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e007      	b.n	8001102 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d0dc      	beq.n	80010ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff49 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e179      	b.n	80015dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8168 	bne.w	80015d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4aa0      	ldr	r2, [pc, #640]	; (800158c <HAL_GPIO_Init+0x2b8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4a9e      	ldr	r2, [pc, #632]	; (800158c <HAL_GPIO_Init+0x2b8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4a9e      	ldr	r2, [pc, #632]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a9c      	ldr	r2, [pc, #624]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a9c      	ldr	r2, [pc, #624]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a9a      	ldr	r2, [pc, #616]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a9a      	ldr	r2, [pc, #616]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a98      	ldr	r2, [pc, #608]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a98      	ldr	r2, [pc, #608]	; (800159c <HAL_GPIO_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a96      	ldr	r2, [pc, #600]	; (800159c <HAL_GPIO_Init+0x2c8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80c1 	beq.w	80015d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <HAL_GPIO_Init+0x2d8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d01f      	beq.n	80014d8 <HAL_GPIO_Init+0x204>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d019      	beq.n	80014d4 <HAL_GPIO_Init+0x200>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a44      	ldr	r2, [pc, #272]	; (80015b4 <HAL_GPIO_Init+0x2e0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d013      	beq.n	80014d0 <HAL_GPIO_Init+0x1fc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00d      	beq.n	80014cc <HAL_GPIO_Init+0x1f8>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a42      	ldr	r2, [pc, #264]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x1f4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_GPIO_Init+0x1f0>
 80014c0:	2305      	movs	r3, #5
 80014c2:	e00a      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014c4:	2306      	movs	r3, #6
 80014c6:	e008      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e006      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014cc:	2303      	movs	r3, #3
 80014ce:	e004      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_GPIO_Init+0x206>
 80014d8:	2300      	movs	r3, #0
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	f002 0203 	and.w	r2, r2, #3
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ea:	492f      	ldr	r1, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	492e      	ldr	r1, [pc, #184]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	492a      	ldr	r1, [pc, #168]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800151c:	4013      	ands	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4924      	ldr	r1, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001544:	4013      	ands	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	491a      	ldr	r1, [pc, #104]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800156c:	4013      	ands	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d025      	beq.n	80015c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	4910      	ldr	r1, [pc, #64]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e025      	b.n	80015d6 <HAL_GPIO_Init+0x302>
 800158a:	bf00      	nop
 800158c:	10320000 	.word	0x10320000
 8001590:	10310000 	.word	0x10310000
 8001594:	10220000 	.word	0x10220000
 8001598:	10210000 	.word	0x10210000
 800159c:	10120000 	.word	0x10120000
 80015a0:	10110000 	.word	0x10110000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40011400 	.word	0x40011400
 80015bc:	40011800 	.word	0x40011800
 80015c0:	40011c00 	.word	0x40011c00
 80015c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae7e 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	372c      	adds	r7, #44	; 0x2c
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001646:	e003      	b.n	8001650 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	041a      	lsls	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	611a      	str	r2, [r3, #16]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
	...

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e26c      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8087 	beq.w	800178a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d06c      	beq.n	8001788 <HAL_RCC_OscConfig+0x12c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d168      	bne.n	8001788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e246      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x76>
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e02e      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0xbc>
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff faba 	bl	8000cb0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fab6 	bl	8000cb0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1fa      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xe4>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff faa6 	bl	8000cb0 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff faa2 	bl	8000cb0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1e6      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x10c>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1ba      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fa5b 	bl	8000cb0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fa57 	bl	8000cb0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e19b      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fa3a 	bl	8000cb0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fa36 	bl	8000cb0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e17a      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03a      	beq.n	80018e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d019      	beq.n	80018a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fa1a 	bl	8000cb0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e15a      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 faa6 	bl	8001df0 <RCC_Delay>
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fa00 	bl	8000cb0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff f9fc 	bl	8000cb0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d908      	bls.n	80018d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e140      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	42420000 	.word	0x42420000
 80018d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	4b9e      	ldr	r3, [pc, #632]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e9      	bne.n	80018b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a6 	beq.w	8001a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b97      	ldr	r3, [pc, #604]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a93      	ldr	r2, [pc, #588]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b91      	ldr	r3, [pc, #580]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b8e      	ldr	r3, [pc, #568]	; (8001b54 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x4f8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a8a      	ldr	r2, [pc, #552]	; (8001b54 <HAL_RCC_OscConfig+0x4f8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff f9bd 	bl	8000cb0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff f9b9 	bl	8000cb0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0fd      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <HAL_RCC_OscConfig+0x4f8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001960:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a7a      	ldr	r2, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e02d      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x334>
 8001976:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a75      	ldr	r2, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a72      	ldr	r2, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x356>
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a6c      	ldr	r2, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a69      	ldr	r2, [pc, #420]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 80019b2:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a66      	ldr	r2, [pc, #408]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a63      	ldr	r2, [pc, #396]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f96d 	bl	8000cb0 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff f969 	bl	8000cb0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0ab      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x37e>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f957 	bl	8000cb0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff f953 	bl	8000cb0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e095      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a47      	ldr	r2, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8081 	beq.w	8001b46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d061      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d146      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x4fc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f927 	bl	8000cb0 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f923 	bl	8000cb0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e067      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	492d      	ldr	r1, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a19      	ldr	r1, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	4927      	ldr	r1, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x4fc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff f8f7 	bl	8000cb0 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f8f3 	bl	8000cb0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e037      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
 8001ae4:	e02f      	b.n	8001b46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_RCC_OscConfig+0x4fc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f8e0 	bl	8000cb0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f8dc 	bl	8000cb0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e020      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x498>
 8001b12:	e018      	b.n	8001b46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e013      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
 8001b58:	42420060 	.word	0x42420060

08001b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0d0      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4965      	ldr	r1, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d040      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e073      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06b      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4936      	ldr	r1, [pc, #216]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f830 	bl	8000cb0 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f82c 	bl	8000cb0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e053      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d210      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4922      	ldr	r1, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1cc>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ff8e 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08002b28 	.word	0x08002b28
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b490      	push	{r4, r7}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d38:	1d3c      	adds	r4, r7, #4
 8001d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d40:	f240 2301 	movw	r3, #513	; 0x201
 8001d44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x46>
 8001d6e:	e02d      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d72:	623b      	str	r3, [r7, #32]
      break;
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d82:	4413      	add	r3, r2
 8001d84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c5b      	lsrs	r3, r3, #17
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001da2:	4413      	add	r3, r2
 8001da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dae:	fb02 f203 	mul.w	r2, r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e004      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	623b      	str	r3, [r7, #32]
      break;
 8001dca:	e002      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dce:	623b      	str	r3, [r7, #32]
      break;
 8001dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc90      	pop	{r4, r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	08002ab8 	.word	0x08002ab8
 8001de4:	40021000 	.word	0x40021000
 8001de8:	003d0900 	.word	0x003d0900
 8001dec:	007a1200 	.word	0x007a1200

08001df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <RCC_Delay+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <RCC_Delay+0x38>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e0c:	bf00      	nop
  }
  while (Delay --);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <RCC_Delay+0x1c>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000000 	.word	0x20000000
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07d      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	61d3      	str	r3, [r2, #28]
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe ff10 	bl	8000cb0 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe ff0c 	bl	8000cb0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06d      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02e      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d027      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d014      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fedb 	bl	8000cb0 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fed7 	bl	8000cb0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e036      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4917      	ldr	r1, [pc, #92]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4904      	ldr	r1, [pc, #16]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420440 	.word	0x42420440

08001f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e041      	b.n	800202e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd6a 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f000 fa08 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e041      	b.n	80020cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f839 	bl	80020d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f000 f9b9 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0ac      	b.n	800225c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f200 809f 	bhi.w	8002250 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002251 	.word	0x08002251
 8002120:	08002251 	.word	0x08002251
 8002124:	08002251 	.word	0x08002251
 8002128:	0800218d 	.word	0x0800218d
 800212c:	08002251 	.word	0x08002251
 8002130:	08002251 	.word	0x08002251
 8002134:	08002251 	.word	0x08002251
 8002138:	080021cf 	.word	0x080021cf
 800213c:	08002251 	.word	0x08002251
 8002140:	08002251 	.word	0x08002251
 8002144:	08002251 	.word	0x08002251
 8002148:	0800220f 	.word	0x0800220f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f9c4 	bl	80024e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
      break;
 800218a:	e062      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fa14 	bl	80025c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6999      	ldr	r1, [r3, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
      break;
 80021cc:	e041      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fa67 	bl	80026a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      break;
 800220c:	e021      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fabb 	bl	8002790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
      break;
 800224e:	e000      	b.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_TIM_ConfigClockSource+0x18>
 8002278:	2302      	movs	r3, #2
 800227a:	e0b3      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x180>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800229a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b4:	d03e      	beq.n	8002334 <HAL_TIM_ConfigClockSource+0xd0>
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	f200 8087 	bhi.w	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	f000 8085 	beq.w	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ca:	d87f      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d01a      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0xa2>
 80022d0:	2b70      	cmp	r3, #112	; 0x70
 80022d2:	d87b      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022d4:	2b60      	cmp	r3, #96	; 0x60
 80022d6:	d050      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x116>
 80022d8:	2b60      	cmp	r3, #96	; 0x60
 80022da:	d877      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022dc:	2b50      	cmp	r3, #80	; 0x50
 80022de:	d03c      	beq.n	800235a <HAL_TIM_ConfigClockSource+0xf6>
 80022e0:	2b50      	cmp	r3, #80	; 0x50
 80022e2:	d873      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d058      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x136>
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d86f      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d064      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 80022f0:	2b30      	cmp	r3, #48	; 0x30
 80022f2:	d86b      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d060      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d867      	bhi.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d05a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002304:	e062      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f000 fb06 	bl	8002926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
      break;
 8002332:	e04e      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f000 faef 	bl	8002926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002356:	609a      	str	r2, [r3, #8]
      break;
 8002358:	e03b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 fa66 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2150      	movs	r1, #80	; 0x50
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fabd 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002378:	e02b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 fa84 	bl	8002894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2160      	movs	r1, #96	; 0x60
 8002392:	4618      	mov	r0, r3
 8002394:	f000 faad 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 8002398:	e01b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 fa46 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa9d 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e00b      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f000 fa94 	bl	80028f2 <TIM_ITRx_SetConfig>
        break;
 80023ca:	e002      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023cc:	bf00      	nop
 80023ce:	e000      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <TIM_Base_SetConfig+0xe0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <TIM_Base_SetConfig+0xe4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00f      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d00b      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <TIM_Base_SetConfig+0xe8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a2e      	ldr	r2, [pc, #184]	; (80024d8 <TIM_Base_SetConfig+0xec>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d003      	beq.n	800242c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <TIM_Base_SetConfig+0xf0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d108      	bne.n	800243e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <TIM_Base_SetConfig+0xe0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <TIM_Base_SetConfig+0x82>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <TIM_Base_SetConfig+0xe4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00f      	beq.n	800246e <TIM_Base_SetConfig+0x82>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d00b      	beq.n	800246e <TIM_Base_SetConfig+0x82>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <TIM_Base_SetConfig+0xe8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x82>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <TIM_Base_SetConfig+0xec>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x82>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <TIM_Base_SetConfig+0xf0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <TIM_Base_SetConfig+0xe0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0xc8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <TIM_Base_SetConfig+0xe4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40013400 	.word	0x40013400
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40000c00 	.word	0x40000c00

080024e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0201 	bic.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <TIM_OC1_SetConfig+0xd8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_OC1_SetConfig+0x64>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <TIM_OC1_SetConfig+0xdc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10c      	bne.n	800255e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0308 	bic.w	r3, r3, #8
 800254a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <TIM_OC1_SetConfig+0xd8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_OC1_SetConfig+0x8e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <TIM_OC1_SetConfig+0xdc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	621a      	str	r2, [r3, #32]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40013400 	.word	0x40013400

080025c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f023 0210 	bic.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0320 	bic.w	r3, r3, #32
 800260a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <TIM_OC2_SetConfig+0xe0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_OC2_SetConfig+0x68>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <TIM_OC2_SetConfig+0xe4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10d      	bne.n	8002644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <TIM_OC2_SetConfig+0xe0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_OC2_SetConfig+0x94>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <TIM_OC2_SetConfig+0xe4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d113      	bne.n	800267c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40013400 	.word	0x40013400

080026a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <TIM_OC3_SetConfig+0xe0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <TIM_OC3_SetConfig+0x66>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <TIM_OC3_SetConfig+0xe4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a16      	ldr	r2, [pc, #88]	; (8002788 <TIM_OC3_SetConfig+0xe0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <TIM_OC3_SetConfig+0x92>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <TIM_OC3_SetConfig+0xe4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d113      	bne.n	8002762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40013400 	.word	0x40013400

08002790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	031b      	lsls	r3, r3, #12
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a11      	ldr	r2, [pc, #68]	; (8002830 <TIM_OC4_SetConfig+0xa0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC4_SetConfig+0x68>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <TIM_OC4_SetConfig+0xa4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d109      	bne.n	800280c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40013400 	.word	0x40013400

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 0210 	bic.w	r2, r3, #16
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	031b      	lsls	r3, r3, #12
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	f043 0307 	orr.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e050      	b.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10c      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40013400 	.word	0x40013400
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	2600      	movs	r6, #0
 8002a40:	4d0c      	ldr	r5, [pc, #48]	; (8002a74 <__libc_init_array+0x38>)
 8002a42:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a44:	1b64      	subs	r4, r4, r5
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	42a6      	cmp	r6, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	f000 f822 	bl	8002a94 <_init>
 8002a50:	2600      	movs	r6, #0
 8002a52:	4d0a      	ldr	r5, [pc, #40]	; (8002a7c <__libc_init_array+0x40>)
 8002a54:	4c0a      	ldr	r4, [pc, #40]	; (8002a80 <__libc_init_array+0x44>)
 8002a56:	1b64      	subs	r4, r4, r5
 8002a58:	10a4      	asrs	r4, r4, #2
 8002a5a:	42a6      	cmp	r6, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a64:	4798      	blx	r3
 8002a66:	3601      	adds	r6, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6e:	4798      	blx	r3
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08002b38 	.word	0x08002b38
 8002a78:	08002b38 	.word	0x08002b38
 8002a7c:	08002b38 	.word	0x08002b38
 8002a80:	08002b3c 	.word	0x08002b3c

08002a84 <memset>:
 8002a84:	4603      	mov	r3, r0
 8002a86:	4402      	add	r2, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
